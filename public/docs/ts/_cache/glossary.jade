block includes
  include _util-fns

//- current.path = ['docs', lang, 'latest', ...]
- var lang = current.path[1]
- var docsPath='/' + current.path[0]
- var docsLatest='/' + current.path.slice(0,3).join('/');
- var _at = lang === 'js' ? '' : '@'
- var _decoratorLink = '<a href="#' + _decorator + '">' + _decorator + '</a>'

:marked
  # Angular 2 용어사전

  Angular 2 has a vocabulary of its own.
  Most Angular 2 terms are everyday English words
  with a specific meaning within the Angular system.

  Angular 2에는 Angular 2만의 용어들이 있습니다.
  대부분의 용어는 일상적인 영어 단어들로 이루어져 있지만
  Angular 시스템 안에서 특정한 의미를 가집니다.

  We have gathered here the most prominent terms
  and a few less familiar ones that have unusual or
  unexpected definitions.

  이 곳에는 가장 주요하게 쓰이는 용어들과
  특이하거나 예상 밖의 정의를 가지고 있어
  친숙하지 않은 몇몇 용어들을 정리해 두었습니다.

  [A](#A) [B](#B) [C](#C) [D](#D) [E](#E) [F](#F) [G](#G) [H](#H) [I](#I)
  [J](#J) [K](#K) [L](#L) [M](#M) [N](#N) [O](#O) [P](#P) [Q](#Q) [R](#R)
  [S](#S) [T](#T) [U](#U) [V](#V) [W](#W) [X](#X) [Y](#Y) [Z](#Z)

.l-main-section#A

+ifDocsFor('ts')
  a#aot
  :marked
    ## Ahead of Time (AOT) Compilation
    ## Ahead of Time (AOT) 컴파일
  .l-sub-section
    :marked
      Angular applications can be compiled by developers at build-time.
      By compiling your application using the compiler-cli, `ngc`, you can bootstrap directly
      to a Module Factory, meaning you don't need to include the Angular compiler in your javascript bundle.
      Ahead of Time compiled applications also benefit from decreased load time and increased performance.

      Angular 애플리케이션은 개발자가 빌드할 때 미리 컴파일할 수 있습니다.
      커맨드라인 compiler인 'ngc'를 사용해 애플리케이션을 컴파일하면 모듈 팩토리(Module Factory)에 바로 실행(bootstrap) 할 수 있습니다.
      이 말은 곧 javascript 번들파일에 Angular 컴파일러를 포함할 필요가 없다는 의미입니다.
      Ahead of Time 컴파일을 적용한 애플리케이션은 로드 시간 절감과 퍼포먼스 향상의 효과를 누릴 수 있습니다.

  :marked
    ## Angular Module
    ## Angular 모듈
  .l-sub-section
    :marked
      Helps us organize an application into cohesive blocks of functionality.
      An Angular module identifies the components, directives, and pipes that are used by the application
      along with the list of external Angular modules that the application needs, such as `FormsModule`.

      애플리케이션을 기능 단위의 결합 가능한 블록들로 구조화할 수 있게 도와줍니다.
      Angular 모듈은 애플리케이션에서 쓰이는 컴포넌트, 지시자, 파이프와 함께,
      애플리케이션에 필요한 외부 앵귤러 모듈 리스트(`FormsModule`과 같은)를 찾고 확인합니다.

      Every Angular application has an application root module class. By convention the class is
      called `AppModule` and resides in a file named `app.component.ts`.

      모든 Angular 애플리케이션은 루트 모듈 클래스를 가집니다. 관례상 이 클래스에는 'AppModule'이라는 이름을 붙이고
      'app.component.ts'라는 이름의 파일 안에 만듭니다.

      See the [Angular Module](!{docsLatest}/guide/ngmodule.html) chapter for details and examples.

      자세한 내용과 예시는 [Angular Module](!{docsLatest}/guide/ngmodule.html)에서 볼 수 있습니다.

+ifDocsFor('ts|dart')
  :marked
    ## Annotation
    ## 어노테이션 (Annotation)
  .l-sub-section
    block annotation-defn
      :marked
        In practice, a synonym for [Decoration](#decorator).

        사실상 [Decoration 데코레이션](#decorator)과 동의어입니다.

:marked
  ## Attribute Directive
  ## 속성 지시자 (Attribute Directive)
.l-sub-section
  :marked
    A category of [Directive](#directive) that can listen to and modify the behavior of
    other HTML elements, attributes, properties, and components. They are usually represented
    as HTML attributes, hence the name.

    다른 HTML 엘리먼트, 속성, 프로퍼티와 컴포넌트들의 행동을 탐지하고 변경할 수 있는
    [지시자(Directive}]{#directive)의 카테고리입니다.
    보통 HTML 속성으로 표현하기 때문에 이런 이름을 갖게 되었습니다.

    The `ngClass` directive for adding and removing CSS class names is a good example of
    an Attribute Directive.

    CSS 클래스명을 추가 또는 제거하는 'ngClass' 지시자가 속성 지시자의 좋은 예시입니다.

.l-main-section#B

+ifDocsFor('ts|js')
  :marked
    ## Barrel
  .l-sub-section
    :marked
      A barrel is a way to *rollup exports* from several ES2015 modules into a single convenience ES2015 module.
      The barrel itself is an ES2015 module file that re-exports *selected* exports of other ES2015 modules.

      Imagine three ES2015 modules in a `heroes` folder:
    code-example.
      // heroes/hero.component.ts
      export class HeroComponent {}

      // heroes/hero.model.ts
      export class Hero {}

      // heroes/hero.service.ts
      export class HeroService {}
    :marked
      Without a barrel, a consumer would need three import statements:
    code-example.
      import { HeroComponent } from '../heroes/hero.component.ts';
      import { Hero }          from '../heroes/hero.model.ts';
      import { HeroService }   from '../heroes/hero.service.ts';
    :marked
      We can add a barrel to the `heroes` folder (called `index` by convention) that exports all of these items:
    code-example.
      export * from './hero.model.ts';   // re-export all of its exports
      export * from './hero.service.ts'; // re-export all of its exports
      export { HeroComponent } from './hero.component.ts'; // re-export the named thing
    :marked
      Now a consumer can import what it needs from the barrel.
    code-example.
      import { Hero, HeroService } from '../heroes'; // index is implied
    :marked
      The Angular [scoped packages](#scoped-package) each have a barrel named `index`.

      That's why we can write this:

    +makeExcerpt('quickstart/ts/app/app.component.ts', 'import', '')

    .alert.is-important
      :marked
        Note that you can often achieve this same goal using [Angular modules](#angular-module) instead.

:marked
  ## Binding
.l-sub-section
  :marked
    Almost always refers to [Data Binding](#data-binding) and the act of
    binding an HTML object property to a data object property.

    May refer to a [Dependency Injection](#dependency-injection) binding
    between a "token" or "key" and a dependency [provider](#provider).
    This more rare usage should be clear in context.

:marked
  ## Bootstrap
.l-sub-section
  block bootstrap-defn-top
    :marked
      We launch an Angular application by "bootstrapping" it using the application root Angular module (`AppModule`).
      The bootstraping identifies an application's top level "root" [Component](#component), which is the first
      component that is loaded for the application. For more information see the [QuickStart](!{docsLatest}/quickstart.html).
  :marked
    One can bootstrap multiple apps in the same `index.html`, each with its own top level root.

.l-main-section#C
:marked
  ## camelCase
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter
    _except the first letter which is a lowercase letter_.

    Function, property, and method names are typically spelled in camelCase. Examples include: `square`, `firstName` and `getHeroes`.

    This form is also known as **lower camel case**, to distinguish it from **upper camel case** which we call [PascalCase](#pascalcase).
    When we write "camelCase" in this documentation we always mean *lower camel case*.

:marked
  ## Component
.l-sub-section
  :marked
    An Angular class responsible for exposing data
    to a [View](#view) and handling most of the view’s display
    and user-interaction logic.

    The Component is one of the most important building blocks in the Angular system.
    It is, in fact, an Angular [Directive](#directive) with a companion [Template](#template).

    The  developer applies the `!{_at}Component` !{_decoratorLink} to
    the component class, thereby attaching to the class the essential component metadata
    that Angular needs to create a component instance and render it with its template
    as a view.

    Those familiar with "MVC" and "MVVM" patterns will recognize
    the Component in the role of "Controller" or "View Model".

.l-main-section#D
:marked
  ## dash-case
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (`-`).
    This form is also known as [kebab-case](#kebab-case).

    [Directive](#directive) selectors (like `my-app`) <span if-docs="ts">and
    the root of filenames (such as `hero-list.component.ts`)</span> are often
    spelled in dash-case.

:marked
  ## Data Binding
.l-sub-section
  :marked
    Applications display data values to a user and respond to user
    actions (clicks, touches, keystrokes).

    We could push application data values into HTML, attach
    event listeners, pull changed values from the screen, and
    update application data values ... all by hand.

    Or we could declare the relationship between an HTML widget
    and an application data source ... and let a data binding
    framework handle the details.

    Data Binding is that second approach. Angular has a rich
    data binding framework with a variety of data binding
    operations and supporting declaration syntax.

     The many forms of binding include:
     * [Interpolation](!{docsLatest}/guide/template-syntax.html#interpolation)
     * [Property Binding](!{docsLatest}/guide/template-syntax.html#property-binding)
     * [Event Binding](!{docsLatest}/guide/template-syntax.html#event-binding)
     * [Attribute Binding](!{docsLatest}/guide/template-syntax.html#attribute-binding)
     * [Class Binding](!{docsLatest}/guide/template-syntax.html#class-binding)
     * [Style Binding](!{docsLatest}/guide/template-syntax.html#style-binding)
     * [Two-way data binding with ngModel](!{docsLatest}/guide/template-syntax.html#ng-model)

    Learn more about data binding in the
    [Template Syntax](!{docsLatest}/guide/template-syntax.html#data-binding) chapter.

+ifDocsFor('ts|dart')
  a#decorator
  a#decoration
  :marked
    ## Decorator | Decoration
  .l-sub-section
    block decorator-defn
      :marked
        A Decorator is a **function** that adds metadata to a class, its members (properties, methods) and function arguments.

        Decorators are a JavaScript language [feature](https://github.com/wycats/javascript-decorators), implemented in TypeScript and proposed for ES2016 (AKA ES7).

        We apply a decorator by positioning it
        immediately above or to the left of the thing it decorates.

        Angular has its own set of decorators to help it interoperate with our application parts.
        Here is an example of a `@Component` decorator that identifies a
        class as an Angular [Component](#component) and an `@Input` decorator applied to a property
        of that component.
        The elided object argument to the `@Component` decorator would contain the pertinent component metadata.
        ```
        @Component({...})
        export class AppComponent {
          constructor(@Inject('SpecialFoo') public foo:Foo) {}
          @Input() name:string;
        }
        ```
        The scope of a decorator is limited to the language feature
        that it decorates. None of the decorations shown here will "leak" to other
        classes appearing below it in the file.

      .alert.is-important
        :marked
          Always include the parentheses `()` when applying a decorator.
          A decorator is a **function** that must be called when applied.

:marked
  ## Dependency Injection
.l-sub-section
  :marked
    Dependency Injection is both a design pattern and a mechanism
    for creating and delivering parts of an application to other
    parts of an application that request them.

    Angular developers prefer to build applications by defining many simple parts
    that each do one thing well and then wire them together at runtime.

    These parts often rely on other parts. An Angular [Component](#component)
    part might rely on a service part to get data or perform a calculation. When a
    part "A" relies on another part "B", we say that "A" depends on "B" and
    that "B" is a dependency of "A".

    We can ask a "Dependency Injection System" to create "A"
    for us and handle all the dependencies.
    If "A" needs "B" and "B" needs "C", the system resolves that chain of dependencies
    and returns a fully prepared instance of "A".

    Angular provides and relies upon its own sophisticated
    [Dependency Injection](dependency-injection.html) system
    to assemble and run applications by "injecting" application parts
    into other application parts where and when needed.

    At the core there is an [`Injector`](#injector) that returns dependency values on request.
    The expression `injector.get(token)` returns the value associated with the given token.

    A token is an Angular type (`OpaqueToken`). We rarely deal with tokens directly; most
    methods accept a class name (`Foo`) or a string ("foo") and Angular converts it
    to a token. When we write `injector.get(Foo)`, the injector returns
    the value associated with the token for the `Foo` class, typically an instance of `Foo` itself.

    Angular makes similar requests internally during many of its operations
    as when it creates a [`Component`](#component) for display.

    The `Injector` maintains an internal map of tokens to dependency values.
    If the `Injector` can't find a value for a given token, it creates
    a new value using a `Provider` for that token.

    A [Provider](#provider) is a recipe for
    creating new instances of a dependency value associated with a particular token.

    An injector can only create a value for a given token if it has
    a `Provider` for that token in its internal provider registry.
    Registering providers is a critical preparatory step.

    Angular registers some of its own providers with every injector.
    We can register our own providers.

    Learn more in the [Dependency Injection](!{docsLatest}/guide/dependency-injection.html) chapter.
:marked
  ## Directive
.l-sub-section
  :marked
    An Angular class responsible for creating, re-shaping, and interacting with HTML elements
    in the browser DOM. Directives are Angular's most fundamental feature.

    A Directive is almost always associated with an HTML element or attribute.
    We often refer to such an element or attribute as the directive itself.
    When Angular finds a directive in an HTML template,
    it creates the matching directive class instance
    and gives that instance control over that portion of the browser DOM.

    Developers can invent custom HTML markup (e.g., `<my-directive>`) to
    associate with their custom directives. They add this custom markup to HTML templates
    as if they were writing native HTML. In this way, directives become extensions of
    HTML itself.

    Directives fall into one of three categories:

    1. [Components](#component) that combine application logic with an HTML template to
    render application [views]. Components are usually represented as HTML elements.
    They are the building blocks of an Angular application and the
    developer can expect to write a lot of them.

    1. [Attribute Directives](#attribute-directive) that can listen to and modify the behavior of
    other HTML elements, attributes, properties, and components. They are usually represented
    as HTML attributes, hence the name.

    1. [Structural Directives](#structural-directive), a directive responsible for
    shaping or re-shaping HTML layout, typically by adding, removing, or manipulating
    elements and their children.

.l-main-section#E

:marked
  ## ECMAScript
.l-sub-section
  :marked
    The [official JavaScript language specification](https://en.wikipedia.org/wiki/ECMAScript).

    The latest approved version of JavaScript is
    [ECMAScript 2016](http://www.ecma-international.org/ecma-262/7.0/)
    (AKA "ES2016" or "ES7") and many Angular 2 developers will write their applications
    either in this version of the language or a dialect that strives to be
    compatible with it such as [TypeScript](#typesScript).

    Most modern browsers today only support the much older "ECMAScript 5" (AKA ES5) standard.
    Applications written in ES2016, ES2015 or one of their dialects must be "[transpiled](#transpile)"
    to ES5 JavaScript.

    Angular 2 developers may choose to write in ES5 directly.

:marked
  ## ES2015
.l-sub-section
  :marked
    Short hand for "[ECMAScript 2015](#ecmascript=2015)".
:marked
  ## ES6
.l-sub-section
  :marked
    Short hand for "[ECMAScript 2015](#ecmascript=2015)".
:marked
  ## ES5
.l-sub-section
  :marked
    Short hand for "ECMAScript 5", the version of JavaScript run by most modern browsers.
    See [ECMAScript](#ecmascript).

a#F
a#G
a#H
.l-main-section#I
:marked
  ## Injector
.l-sub-section
  :marked
    An object in the Angular [dependency injection system](#dependency-injection)
    that can find a named "dependency" in its cache or create such a thing
    with a registered [provider](#provider).

:marked
  ## Input
.l-sub-section
  :marked
    A directive property that can be the ***target*** of a
    [Property Binding](!{docsLatest}/guide/template-syntax.html#property-binding).
    Data values flow *into* this property from the data source identified
    in the template expression to the right of the equal sign.

    See the [Template Syntax](!{docsLatest}/guide/template-syntax.html#inputs-outputs) chapter.

:marked
  ## Interpolation
.l-sub-section
  :marked
    A form of [Property Data Binding](#data-binding) in which a
    [template expression](#template-expression) between double-curly braces
    renders as text.  That text may be concatenated with neighboring text
    before it is assigned to an element property
    or displayed between element tags as in this example.

  code-example(language="html" escape="html").
    <label>My current hero is {{hero.name}}</label>

  :marked
    Learn more about interpolation in the
    [Template Syntax](!{docsLatest}/guide/template-syntax.html#interpolation) chapter.

.l-main-section#J

+ifDocsFor('ts')
  a#jit
  :marked
    ## Just in Time (JIT) Compilation
  .l-sub-section
    :marked
      With Angular _Just in Time_  bootstrapping you compile your components and modules in the browser
      and launch the application dynamically. This is a good choice during development.
      Consider the [Ahead of Time](#aot) mode for production apps.

.l-main-section#K
:marked
  ## kebab-case
.l-sub-section
  :marked
    See [dash-case](#dash-case).

.l-main-section#L
:marked
  ## Lifecycle Hooks
.l-sub-section
  :marked
    [Directives](#directive) and [Components](#component) have a lifecycle
    managed by Angular as it creates, updates and destroys them.

    Developers can tap into key moments in that lifecycle by implementing
    one or more of the "Lifecycle Hook" interfaces.

    Each interface has a single hook method whose name is the interface name prefixed with `ng`.
    For example, the `OnInit` interface has a hook method names `ngOnInit`.

    Angular calls these hook methods in the following order:
    * `ngOnChanges` - called when an [input](#input)/[output](#output) binding values change
    * `ngOnInit` - after the first `ngOnChanges`
    * `ngDoCheck` - developer's custom change detection
    * `ngAfterContentInit` - after component content initialized
    * `ngAfterContentChecked` - after every check of component content
    * `ngAfterViewInit` - after component's view(s) are initialized
    * `ngAfterViewChecked` - after every check of a component's view(s)
    * `ngOnDestroy` - just before the directive is destroyed.

    Learn more in the [Lifecycle Hooks](!{docsLatest}/guide/lifecycle-hooks.html) chapter.

.l-main-section#M

:marked
  ## Module
.l-sub-section
  block module-defn
    .alert.is-important
      :marked
       In Angular, there are two types of modules:
       - [Angular modules](#angular-module).
       See the [Angular Module](!{docsLatest}/guide/ngmodule.html) chapter for details and examples.
       - ES2015 modules as described in this section.

    :marked
      Angular apps are modular.

      In general, we assemble our application from many modules, both the ones we write ourselves
      and the ones we acquire from others.

      A typical module is a cohesive block of code dedicated to a single purpose.

      A module **exports** something of value in that code, typically one thing such as a class.
      A module that needs that thing, **imports** it.

      The structure of Angular modules and the import/export syntax
      is based on the [ES2015](#es2015) module standard
      described [here](http://www.2ality.com/2014/09/es6-modules-final.html).

      An application that adheres to this standard requires a module loader to
      load modules on request and resolve inter-module dependencies.
      Angular does not ship with a module loader and does not have a preference
      for any particular 3rd party library (although most samples use SystemJS).
      Application developers may pick any module library that conforms to the standard

      Modules are typically named after the file in which the exported thing is defined.
      The Angular [DatePipe](https://github.com/angular/angular/blob/master/modules/@angular/common/src/pipes/date_pipe.ts)
      class belongs to a feature module named `date_pipe` in the file `date_pipe.ts`.

      Developers rarely access Angular feature modules directly.
      We usually import them from one of the Angular [scoped packages](#scoped-package) such as `@angular/core`.

a#N
.l-main-section#O

+ifDocsFor('ts|js')
  :marked
    ## Observable
  .l-sub-section
    :marked
      We can think of an observable as an array whose items arrive asynchronously over time.
      Observables help us manage asynchronous data, such as data coming from a backend service.
      Observables are used within Angular itself, including Angular's event system and its http client service.

      Observable은 시간의 흐름에 따라 비동기로 발생하는 데이터의 배열로 이해할 수 있습니다.
      Observable은 백엔드 서비스로부터 수신되는 정보처럼 비동기 데이터를 다룰 때 유용합니다.
      Angular의 이벤트 시스템과 http 클라이언트 서비스를 포함해서 Angular 내부에서도 Observable이 사용됩니다.

      To use observables, Angular uses a third-party library called Reactive Extensions (RxJS).
      Observables are a proposed feature for ES 2016, the next version of JavaScript.

      Angular에서는 Observable을 사용하기 위해서 3rd 라이브러리인 Reactive Extensions (RxJS)를 사용하고 있습니다.
      Observable은 JavaScript 다음 버전인 ES 2106에 포함될 기능으로 제안된 상태입니다.

:marked
  ## 출력 (Output)
.l-sub-section
  :marked
    A directive property that can be the ***target*** of an
    [Event Binding](!{docsLatest}/guide/template-syntax.html#property-binding).
    Events stream *out* of this property to the receiver identified
    in the template expression to the right of the equal sign.

    [이벤트 바인딩(Event Binding)](!{docsLatest}/guide/template-syntax.html#property-binding)의 ***대상***이 되는 지시자의 속성입니다.
    이벤트 스트림은 이 속성에서 *출력*되어 등호 우변의 템플릿 표현식에 지정된 수신자로 전달됩니다.

    See the [Template Syntax](!{docsLatest}/guide/template-syntax.html#inputs-outputs) chapter.

    자세한 내용은 [템플릿 문법](!{docsLatest}/guide/template-syntax.html#inputs-outputs) 챕터를 참고해주세요.

.l-main-section#P

:marked
  ## 파스칼 표기법 (PascalCase)
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter.
    Class names are typically spelled in PascalCase. Examples include: `Person` and `HeroDetailComponent`.

    조합된 단어나 구문을 작성할 매 단어나 약어를 대문자로 시작하는 관례를 말합니다.
    클래스(Class)명은 일반적으로 파스칼 표기법으로 작성합니다. 예를 들면 `Person`이나 `HeroDetailComponent`가 있습니다.

    This form is also known as **upper camel case**, to distinguish it from **lower camel case** which we simply call [camelCase](#camelcase).
    In this documentation, "PascalCase" means *upper camel case* and  "camelCase" means *lower camel case*.

    파스칼 케이스 형태는 간단히 [카멜 표기법(camelCase)](#camelcase)으로 부르는 **lower camel case**와 구분하기 위해서 **upper camel case**로 알려져 있습니다.
    이 문서에서 파스칼 표기법은 *upper camel case*이고 카멜 표기법(camelCase)은 *lower camel case*를 의미합니다.

:marked
  ## 파이프 (Pipe)
.l-sub-section
  :marked
    An Angular pipe is a function that transforms input values to output values for
    display in a [view](#view). We use the `!{_at}Pipe` !{_decoratorLink}
    to associate the pipe function with a name. We can then use that
    name in our HTML to declaratively transform values on screen.

    Angular의 파이프(pipe)는 입력값을 [뷰(view)](#view)에 표현하기 위한 출력값으로 변환시키는 함수입니다.
    파이프함수에 이름을 부여하기 위해서 `!{_at}Pipe` !{_decoratorLink}를 사용합니다.
    이 이름이 HTML 안에서 사용되어 화면 상의 값을 선언적으로 변환합니다.

    Here's an example that uses the built-in `currency` pipe to display
    a numeric value in the local currency.

    다음의 예제는 내장 파이프 `currency`를 사용하여 숫자형 값을 지역 통화로 표현하는 방법입니다.

  code-example(language="html" escape="html").
    <label>Price: </label>{{product.price | currency}}
  :marked
    Learn more in the chapter on [pipes](!{docsLatest}/guide/pipes.html) .

    자세한 내용은 [파이프(pipes)](!{docsLatest}/guide/pipes.html) 챕터에서 확인하세요.

- var _ProviderUrl = docsLatest+'/api/'+(lang == 'dart' ? 'angular2.core' : 'core/index')+'/Provider-class.html'
:marked
  ## 공급자 (Provider)
.l-sub-section
  :marked
    A [Provider](!{_ProviderUrl}) creates a new instance of a dependency for the
    [Dependency Injection](#dependency-injection) system.
    It relates a lookup token to code &mdash; sometimes called a "recipe" &mdash;
    that can create a dependency value.

    [공급자(Provider)](!{_ProviderUrl})는 [의존성 주입(Dependency Injection)](#dependency-injection) 시스템을 위해서 새로운 의존 인스턴스를 생성합니다.
    공급자는 조회용 토큰을 소위 조리법(recipe)이라 불리우는 의존값을 생성할 수 있는 코드와 연결시킵니다.

a#Q
.l-main-section#R

+ifDocsFor('ts|js')
  :marked
    ## 반응형 폼 (Reactive Forms)
  .l-sub-section
    :marked
      A technique for building Angular forms through code in a component.
      The alternate technique is [Template-Driven Forms](#template-driven-forms).

      컴포넌트 코드를 통해 Angular 폼을 구성하는 기술.
      대안 기술로는 [템플릿 주도 폼 (Template-Driven Forms)](#template-driven-forms)이 있음.

      When building reactive forms:
      - The "source of truth" is the component. The validation is defined using code in the component.
      - Each control is explicitly created in the component class with `new FormControl()` or with `FormBuilder`.
      - The template input elements do *not* use `ngModel`.
      - The associated Angular directives are all prefixed with `Form` such as `FormGroup`, `FormControl`, and `FormControlName`.

      반응형 폼 구성 시:
      - 정보의 유일한 원천은 컴포넌트입니다. 값의 검증은 컴포넌트 안의 코드에서 정의합니다.
      - 폼의 요소인 각 컨트롤은 컴포넌트 클래스 안에서 `new FormControl()`나 `FormBuilder`를 통해서 명시적으로 생성됩니다.
      - 템플릿의 입력 요소는 `ngModel`을 *사용하면 안 됩니다.*
      - 관련된 Angular의 지시자는 모두 `Form`을 접두어로 가진 `FormGroup`, `FormControl`, `FormControlName`이 있습니다.

      Reactive forms are powerful, flexible, and great for more complex data entry form scenarios, such as dynamic generation
      of form controls.

      반응형 폼은 동적으로 폼의 컨트롤 요소를 생성해야 하는 경우처럼 좀 더 복잡한 데이터 입력 폼 시나리오를 지원하는 강력하고, 유연하며, 훌륭한 기술입니다.

:marked
  ## 라우터 (Router)
.l-sub-section
  :marked
    Most applications consist of many screens or [views](#view).
    The user navigates among them by clicking links and buttons
    and taking other similar actions that cause the application to
    replace one view with another.

    대부분의 애플리케이션은 많은 화면 또는 [뷰(views)](#view)로 구성되어 있습니다.
    사용자는 링크 또는 버튼을 클릭하거나 이와 유사하게 애플리케이션의 뷰를 치환하는 행위를 통해서 여러 뷰를 돌아다닙니다.

    The Angular [Component Router](!{docsLatest}/guide/router.html) is a richly featured mechanism for configuring
    and managing the entire view navigation process including the creation and destruction
    of views.

    Angular의 [라우터 컴포넌트(Component Router)](!{docsLatest}/guide/router.html)는 뷰의 생성과 소멸을 포함하여 전체 뷰의 탐험과정의 구성과 관리를 위해
    풍부한 기능을 갖고 있습니다.
  +ifDocsFor('ts|js')
    :marked
      In most cases, components becomes attached to a [router](#router) by means
      of a `RouterConfig` that defines routes to views.

      대부분의 경우 컴포넌트는 뷰로의 라우팅을 정의하는 `RouterConfig`를 사용하여 [라우터(router)](#router)에 포함됩니다.

      A [routing component's](#routing-component) template has a `RouterOutlet` element
      where it can display views produced by the router.

      [라우팅 컴포넌트](#routing-component)의 템플릿에는 라우터가 제공하는 뷰가 보여질 위치를 지정할 때 사용하는 `RouterOutlet` 요소를 갖고 있습니다.

      Other views in the application likely have anchor tags or buttons with `RouterLink`
      directives that users can click to navigate.

      애플리케이션의 다른 뷰는 앵커 태그나 `RouterLink` 지시자가 정의된 버튼을 사용자가 클릭하여 찾아갈 수 있을 것입니다.

      See the [Component Router](!{docsLatest}/guide/router.html) chapter to learn more.

      더 자세한 내용은 [라우터 컴포넌트(Component Router)](!{docsLatest}/guide/router.html) 챕터를 참고하세요.

+ifDocsFor('ts|js')
  :marked
    ## 라우터 모듈 (RouterModule)
  .l-sub-section
    :marked
      A separate [Angular module](#angular-module) that provides the necessary service providers and directives for navigating through application views.

      애플리케이션의 뷰를 이동하는데 필요한 서비스 공급자와 지시자를 제공하는 독립된 [Angular 모듈](#angular-module) 

      See the [Component Router](!{docsLatest}/guide/router.html) chapter to learn more.

      더 자세한 내용은 [라우터 컴포넌트(Component Router)](!{docsLatest}/guide/router.html) 챕터를 참고하세요.

:marked
  ## 라우팅 컴포넌트 (Routing Component)
.l-sub-section
  block routing-component-defn
    :marked
      An Angular [Component](#component) with a RouterOutlet that displays views based on router navigations.

      라우터 내비게이션을 통해서 화면에 뷰를 나타낼 RouterOutlet 을 지닌 Angular [컴포넌트](#component)

      See the [Component Router](!{docsLatest}/guide/router.html) chapter to learn more.

      더 자세한 내용은 [라우터 컴포넌트(Component Router)](!{docsLatest}/guide/router.html) 챕터를 참고하세요.

.l-main-section#S

+ifDocsFor('ts|js')
  :marked
    ## Scoped Package
  .l-sub-section
    :marked
      Angular modules are delivered within *scoped packages* such as `@angular/core`, `@angular/common`, `@angular/platform-browser-dynamic`,
      `@angular/http`, and `@angular/router`.

      Angular의 모듈은 `@angular/core`, `@angular/common`, `@angular/platform-browser-dynamic`, `@angular/http`, `@angular/router`과 같이
      *Scoped Package*안에서 역할별로 나누어 배포하고 있습니다.

      A [*scoped package*](https://docs.npmjs.com/misc/scope) is a way to group related *npm* packages.

      [*Scope Package*](https://docs.npmjs.com/misc/scope)는 관련 *NPM* 패키지를 하나로 구성하는 방법입니다.

      We import a scoped package the same way we'd import a *normal* package.
      The only difference, from a consumer perspective,
      is that the package name begins with the Angular *scope name*, `@angular`.

      Scope package도 *일반* 패키지와 동일한 방식으로 임포트 합니다.
      사용자 관점에서 유일한 차이점은 Angular의 *범위 이름*인 `@angular`로 패키지명이 시작한다는 것 뿐입니다.

    +makeExcerpt('architecture/ts/app/app.component.ts', 'import', '')

a#snake-case
:marked
  ## 스네이크 표기법(snake_case)

.l-sub-section
  block snake-case-defn
    :marked
      The practice of writing compound words or phrases such that each word is separated by an
      underscore (`_`). This form is also known as **underscore case**.

      조합된 단어나 구문의 각 단어를 밑줄(`_`)로 구분하는 관례. 이러한 형태는 **밑줄 표기법(underscore case)**이라고도 합니다.

:marked
  ## 서비스 (Service)
.l-sub-section
  :marked
    Components are great and all, but what do we do with data or logic that are not associated
    with a specific view or that we want to share across components? We build services!

    컴포넌트는 충분히 훌륭하지만 특정 뷰와 관련이 없는 데이터나 로직을 다뤄야 한다거나 혹은 컴포넌트 간의 이를 공유하고 싶을 때는 무엇을 할 수 있을까요?
    이 때 서비스를 생성하면 됩니다.

    Applications often require services such as a hero data service or a logging service.
    Our components depend on these services to do the heavy lifting.

    애플리케이션은 히어로 데이터 서비스나 로깅 서비스와 같은 기능을 요구할 때가 종종있습니다.
    컴포넌트는 서비스에 이러한 다루기 힘든 작업을 위임합니다.

    A service is a class with a focused purpose.
    We often create a service to implement features that are
    independent from any specific view,
    provide share data or logic across components, or encapsulate external interactions.

    서비스는 뚜렷한 목적을 지닌 클래스입니다.
    주로 어떤 뷰에도 종속되지 않는 기능을 구현하거나, 공유할 데이터를 제공하거나,
    컴포넌트 간의 로직을 제공하거나, 또는 외부와 상호작용을 감추기 위한 용도로 서비스를 생성합니다.

    See the [Services](!{docsLatest}/tutorial/toh-pt4.html) chapter of the tutorial to learn more.

    더 자세한 내용은 튜토리얼의 [서비스](!{docsLatest}/tutorial/toh-pt4.html) 장을 참고하세요.

:marked
  ## 구조형 지시자 (Structural Directive)
.l-sub-section
  :marked
    A category of [Directive](#directive) that can
    shape or re-shape HTML layout, typically by adding, removing, or manipulating
    elements and their children.

    [지사자](#directive) 유형 중 하나로 일반적으로 HTML 요소 및 자식요소들을 더하거나, 빼거나, 조작하여 HTML 레이아웃을 만들거나 수정할 때 사용합니다.

    The `ngIf` "conditional element" directive and the `ngFor` "repeater" directive are
    good examples in this category.

    구조형 지시자 유형의 대표적인 예로 "조건형 요소" 지시자 `ngIf`와 "반복형" 지사자 `ngFor`가 있습니다.

    See the [Structural Directives](!{docsLatest}/guide/structural-directives.html) chapter to learn more.

    더 자세한 내용은 [구조형 지시자](!{docsLatest}/guide/structural-directives.html) 장을 참고하세요.

.l-main-section#T
:marked
  ## 템플릿 (Template)
.l-sub-section
  :marked
    A template is a chunk of HTML that Angular uses to render a [view](#view) with
    the support and continuing guidance of an Angular [Directive](#directive),
    most notably a [Component](#component).

    템플릿은 Angular의 도움을 받아 [뷰](#view)를 렌더링할 때 쓸 HTML 덩어리입니다.
    템플릿은 [지시자](#directive)와 [컴포넌트](#component)의 도움으로 뷰를 구성합니다.

    We write templates in a special [Template Syntax](!{docsLatest}/guide/template-syntax.html).
    템플릿은 [템플릿 문법](!{docsLatest}/guide/template-syntax.html)으로 작성합니다.

+ifDocsFor('ts|js')
  :marked
    ## 템플릿 주도 폼 (Template-Driven Forms)
  .l-sub-section
    :marked
      A technique for building Angular forms using HTML forms and input elements in the view.
      The alternate technique is [Reactive Forms](#reactive-forms).

      뷰에서 HTML의 폼과 입력 요소를 사용하여 Angular의 폼을 구성하는 기술.
      대안기술로 [반응형 폼(Reactive Forms)](#reactive-forms)가 있습니다.

      When building template-driven forms:
      - The "source of truth" is the template. The validation is defined using attributes on the individual input elements.
      - [Two-way binding](#data-binding) with `ngModel` keeps the component model in synchronization with the user's entry into the input elements.
      - Behind the scenes, Angular creates a new control for each input element that has a `name` attribute and
      two-way binding set up.
      - The associated Angular directives are all prefixed with `ng` such as `ngForm`, `ngModel`, and `ngModelGroup`.

      템플릿 주도 폼 구성 시:
      - 정보의 유일한 원천은 템플릿입니다. 개별 값의 검증은 입력 요소의 속성으로 정의합니다. 
      - `ngModel`로 [양방향 바인딩(Two-way binding)](#data-binding)을 선언하면 사용자가 진입 시 컴포넌트의 모델의 동기화되어 입력 요소와 동일한 값을 유지합니다.
      - 내부적으로, Angular는 `name`속성을 지닌 각 입력요소마다 새로운 컨트롤을 생성하고 양방향 바인딩 설정을 합니다.
      - 관련된 Angular의 지시자는 모두 `ng`를 접두어로 가진 `ngForm`, `ngModel`, and `ngModelGroup`이 있습니다.

      Template-driven forms are convenient, quick, and simple and are a good choice for many basic data entry form scenarios.

      템플릿 주도 폼은 대부분 기본적인 데이터 초기화 폼 시나리오에 잘 맞는 편리하고 빠르며 간단한 방식입니다.
 
      Learn how to build template-driven forms
      in the [Forms](!{docsLatest}/guide/forms.html) chapter.

      템플릿 주도 폼을 작성하는 방법은 [폼](!{docsLatest}/guide/forms.html) 챕터를 참고하세요.

:marked
  ## 템플릿 표현식 (Template Expression)
.l-sub-section
  :marked
    An expression is a !{_Lang}-like syntax that Angular evaluates within
    a [data binding](#data-binding).  Learn how to write template expressions
    in the [Template Syntax](!{docsLatest}/guide/template-syntax.html#template-expressions) chapter.

    표현식은 Angular가 평가할 수 있는 [데이터 바인딩](#data-binding)에 !{_Lang}와 유사한 문법의 작성된 코드입니다.
    템플릿 표현식의 작성법은 [템플릿 문법](!{docsLatest}/guide/template-syntax.html#template-expressions) 챕터를 참고하세요.

:marked
  ## 트랜스파일 (Transpile)
.l-sub-section
  :marked
    The process of transforming code written in one form of JavaScript
    (e.g., TypeScript) into another form of JavaScript  (e.g., [ES5](#es5)).

    JavaScript 중 특정 형식(예를 들면 TypeScript)으로 작성된 코드를 다른 형식의 JavaScript (예를 들면 [ES5](#es5))로
    변환하는 작업

 :marked
  ## 타입스크립트 (TypeScript)
.l-sub-section
  :marked
    A version of JavaScript that supports most [ECMAScript 2015](#ecmascript=2015)
    language features and many features that may arrive in future versions
    of JavaScript such as [Decorators](#decorator).

    대부분의 [ECMAScript 2015](#ecmascript=2015) 언어 기능과 [데코레이터](#decorator)처럼 JavaScript의
    후속 버전에 포함될 여러 기능들을 지원하는 새로운 형식의 JavaScript 버전입니다.

    TypeScript is also noteable for its optional typing system which gives
    us compile-time type-checking and strong tooling support (e.g. "intellisense",
    code completion, refactoring, and intelligent search). Many code editors
    and IDEs support TypeScript either natively or with plugins.

    타입스크립트의 주목할 만한 점은 컴파일 시점의 타입검사를 할 수 있는 타입 시스템을 선택할 수 있다는 점과
    "인텔리센스, 코드 자동완성, 리팩토링, 인텔리젠트 검색과 같은 강력한 지원도구를 제공한다는 점입니다.
    대다수 코드 에디터나 IDE는 타입스크립트를 기본으로 지원하거나 플러그인 형태로 사용할 수 있습니다.

    TypeScript is the preferred language for Angular 2 development although
    we are welcome to write in other JavaScript dialects such as [ES5](#es5).

    타입스크립트는 Angular2 개발을 위해 권장하는 언어입니다.
    물론 [ES5](#es5)와 같이 다른 JavaScript 형식으로 작성하는 것도 환영합니다.

    Learn more about TypeScript on its [website](http://www.typescriptlang.org/).

    타입스크립트와 관련된 내용은 [웹사이트](http://www.typescriptlang.org/)를 참고하세요.

a#U
.l-main-section#V

:marked
  ## View
.l-sub-section
  :marked
    A view is a portion of the screen that displays information and responds
    to user actions such as clicks, mouse moves, and keystrokes.

    Angular renders a view under the control of one or more [Directives](#directive),
    especially  [Component](#component) directives and their companion [Templates](#template).
    The Component plays such a prominent role that we often
    find it convenient to refer to a component as a view.

    Views often contain other views and any view might be loaded and unloaded
    dynamically as the user navigates through the application, typically
    under the control of a [router](#router).

a#W
a#X
a#Y
.l-main-section#Z

:marked
  ## Zone
.l-sub-section
  block zone-defn
    :marked
      Zones are a mechanism for encapsulating and intercepting
      a JavaScript application's asynchronous activity.

      The browser DOM and JavaScript have a limited number
      of asynchronous activities, activities such as DOM events (e.g., clicks),
      [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), and
      [XHR](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)
      calls to remote servers.

      Zones intercept all of these activities and give a "zone client" the opportunity
      to take action before and after the async activity completes.

      Angular runs our application in a zone where it can respond to
      asynchronous events by checking for data changes and updating
      the information it displays via [data bindings](#data-binding).

      Learn more about zones in this
      [Brian Ford video](https://www.youtube.com/watch?v=3IqtmUscE_U).
