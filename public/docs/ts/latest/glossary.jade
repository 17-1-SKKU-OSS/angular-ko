block includes
  include _util-fns

//- current.path = ['docs', lang, 'latest', ...]
- var lang = current.path[1]
- var docsPath='/' + current.path[0]
- var docsLatest='/' + current.path.slice(0,3).join('/');
- var _at = lang === 'js' ? '' : '@'
- var _decoratorLink = '<a href="#' + _decorator + '">' + _decorator + '</a>'

:marked
  # Angular 2 Glossary

  Angular 2 has a vocabulary of its own.
  Most Angular 2 terms are everyday English words
  with a specific meaning within the Angular system.

  We have gathered here the most prominent terms
  and a few less familiar ones that have unusual or
  unexpected definitions.

  [A](#A) [B](#B) [C](#C) [D](#D) [E](#E) [F](#F) [G](#G) [H](#H) [I](#I)
  [J](#J) [K](#K) [L](#L) [M](#M) [N](#N) [O](#O) [P](#P) [Q](#Q) [R](#R)
  [S](#S) [T](#T) [U](#U) [V](#V) [W](#W) [X](#X) [Y](#Y) [Z](#Z)

.l-main-section#A

+ifDocsFor('ts')
  a#aot
  :marked
    ## Ahead of Time (AOT) Compilation
  .l-sub-section
    :marked
      Angular applications can be compiled by developers at build-time.
      By compiling your application using the compiler-cli, `ngc`, you can boostrap directly
      to a Module Factory, meaning you don't need to include the Angular compiler in your javascript bundle.
      Ahead of Time compiled applications also benefit from decreased load time and increased performance.

  :marked
    ## Angular Module
  .l-sub-section
    :marked
      Helps us organize an application into cohesive blocks of functionality.
      An Angular module identifies the components, directives, and pipes that are used by the application
      along with the list of external Angular modules that the application needs, such as `FormsModule`.

      Every Angular application has an application root module class. By convention the class is
      called `AppModule` and resides in a file named `app.component.ts`.

      See the [Angular Module](!{docsLatest}/guide/ngmodule.html) chapter for details and examples.

+ifDocsFor('ts|dart')
  :marked
    ## Annotation
  .l-sub-section
    block annotation-defn
      :marked
        In practice, a synonym for [Decoration](#decorator).

:marked
  ## Attribute Directive
.l-sub-section
  :marked
    A category of [Directive](#directive) that can listen to and modify the behavior of
    other HTML elements, attributes, properties, and components. They are usually represented
    as HTML attributes, hence the name.

    The `ngClass` directive for adding and removing CSS class names is a good example of
    an Attribute Directive.

.l-main-section#B

+ifDocsFor('ts|js')
  :marked
    ## Barrel
  .l-sub-section
    :marked
      A barrel is a way to *rollup exports* from several ES2015 modules into a single convenience ES2015 module.
      The barrel itself is an ES2015 module file that re-exports *selected* exports of other ES2015 modules.

      Imagine three ES2015 modules in a `heroes` folder:
    code-example.
      // heroes/hero.component.ts
      export class HeroComponent {}

      // heroes/hero.model.ts
      export class Hero {}

      // heroes/hero.service.ts
      export class HeroService {}
    :marked
      Without a barrel, a consumer would need three import statements:
    code-example.
      import { HeroComponent } from '../heroes/hero.component.ts';
      import { Hero }          from '../heroes/hero.model.ts';
      import { HeroService }   from '../heroes/hero.service.ts';
    :marked
      We can add a barrel to the `heroes` folder (called `index` by convention) that exports all of these items:
    code-example.
      export * from './hero.model.ts';   // re-export all of its exports
      export * from './hero.service.ts'; // re-export all of its exports
      export { HeroComponent } from './hero.component.ts'; // re-export the named thing
    :marked
      Now a consumer can import what it needs from the barrel.
    code-example.
      import { Hero, HeroService } from '../heroes'; // index is implied
    :marked
      The Angular [scoped packages](#scoped-package) each have a barrel named `index`.

      That's why we can write this:

    +makeExcerpt('quickstart/ts/app/app.component.ts', 'import', '')

    .alert.is-important
      :marked
        Note that you can often achieve this same goal using [Angular modules](#angular-module) instead.

:marked
  ## Binding
.l-sub-section
  :marked
    Almost always refers to [Data Binding](#data-binding) and the act of
    binding an HTML object property to a data object property.

    May refer to a [Dependency Injection](#dependency-injection) binding
    between a "token" or "key" and a dependency [provider](#provider).
    This more rare usage should be clear in context.

:marked
  ## Bootstrap
.l-sub-section
  block bootstrap-defn-top
    :marked
      We launch an Angular application by "bootstrapping" it using the application root Angular module (`AppModule`).
      The bootstraping identifies an application's top level "root" [Component](#component), which is the first
      component that is loaded for the application. For more information see the [QuickStart](!{docsLatest}/quickstart.html).
  :marked
    One can bootstrap multiple apps in the same `index.html`, each with its own top level root.

.l-main-section#C
:marked
  ## camelCase
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter
    _except the first letter which is a lowercase letter_.

    Function, property, and method names are typically spelled in camelCase. Examples include: `square`, `firstName` and `getHeroes`.

    This form is also known as **lower camel case**, to distinguish it from **upper camel case** which we call [PascalCase](#pascalcase).
    When we write "camelCase" in this documentation we always mean *lower camel case*.

:marked
  ## Component
.l-sub-section
  :marked
    An Angular class responsible for exposing data
    to a [View](#view) and handling most of the view’s display
    and user-interaction logic.

    The Component is one of the most important building blocks in the Angular system.
    It is, in fact, an Angular [Directive](#directive) with a companion [Template](#template).

    The  developer applies the `!{_at}Component` !{_decoratorLink} to
    the component class, thereby attaching to the class the essential component metadata
    that Angular needs to create a component instance and render it with its template
    as a view.

    Those familiar with "MVC" and "MVVM" patterns will recognize
    the Component in the role of "Controller" or "View Model".

.l-main-section#D
:marked
  ## dash-case
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (`-`).
    This form is also known as [kebab-case](#kebab-case).

    [Directive](#directive) selectors (like `my-app`) <span if-docs="ts">and
    the root of filenames (such as `hero-list.component.ts`)</span> are often
    spelled in dash-case.

:marked
  ## Data Binding
.l-sub-section
  :marked
    Applications display data values to a user and respond to user
    actions (clicks, touches, keystrokes).

    We could push application data values into HTML, attach
    event listeners, pull changed values from the screen, and
    update application data values ... all by hand.

    Or we could declare the relationship between an HTML widget
    and an application data source ... and let a data binding
    framework handle the details.

    Data Binding is that second approach. Angular has a rich
    data binding framework with a variety of data binding
    operations and supporting declaration syntax.

     The many forms of binding include:
     * [Interpolation](!{docsLatest}/guide/template-syntax.html#interpolation)
     * [Property Binding](!{docsLatest}/guide/template-syntax.html#property-binding)
     * [Event Binding](!{docsLatest}/guide/template-syntax.html#event-binding)
     * [Attribute Binding](!{docsLatest}/guide/template-syntax.html#attribute-binding)
     * [Class Binding](!{docsLatest}/guide/template-syntax.html#class-binding)
     * [Style Binding](!{docsLatest}/guide/template-syntax.html#style-binding)
     * [Two-way data binding with ngModel](!{docsLatest}/guide/template-syntax.html#ng-model)

    Learn more about data binding in the
    [Template Syntax](!{docsLatest}/guide/template-syntax.html#data-binding) chapter.

+ifDocsFor('ts|dart')
  a#decorator
  a#decoration
  :marked
    ## Decorator | Decoration
  .l-sub-section
    block decorator-defn
      :marked
        A Decorator is a **function** that adds metadata to a class, its members (properties, methods) and function arguments.

        Decorators are a JavaScript language [feature](https://github.com/wycats/javascript-decorators), implemented in TypeScript and proposed for ES2016 (AKA ES7).

        We apply a decorator by positioning it
        immediately above or to the left of the thing it decorates.

        Angular has its own set of decorators to help it interoperate with our application parts.
        Here is an example of a `@Component` decorator that identifies a
        class as an Angular [Component](#component) and an `@Input` decorator applied to a property
        of that component.
        The elided object argument to the `@Component` decorator would contain the pertinent component metadata.
        ```
        @Component({...})
        export class AppComponent {
          constructor(@Inject('SpecialFoo') public foo:Foo) {}
          @Input() name:string;
        }
        ```
        The scope of a decorator is limited to the language feature
        that it decorates. None of the decorations shown here will "leak" to other
        classes appearing below it in the file.

      .alert.is-important
        :marked
          Always include the parentheses `()` when applying a decorator.
          A decorator is a **function** that must be called when applied.

:marked
  ## Dependency Injection
.l-sub-section
  :marked
    Dependency Injection is both a design pattern and a mechanism
    for creating and delivering parts of an application to other
    parts of an application that request them.

    Angular developers prefer to build applications by defining many simple parts
    that each do one thing well and then wire them together at runtime.

    These parts often rely on other parts. An Angular [Component](#component)
    part might rely on a service part to get data or perform a calculation. When a
    part "A" relies on another part "B", we say that "A" depends on "B" and
    that "B" is a dependency of "A".

    We can ask a "Dependency Injection System" to create "A"
    for us and handle all the dependencies.
    If "A" needs "B" and "B" needs "C", the system resolves that chain of dependencies
    and returns a fully prepared instance of "A".

    Angular provides and relies upon its own sophisticated
    [Dependency Injection](dependency-injection.html) system
    to assemble and run applications by "injecting" application parts
    into other application parts where and when needed.

    At the core there is an [`Injector`](#injector) that returns dependency values on request.
    The expression `injector.get(token)` returns the value associated with the given token.

    A token is an Angular type (`OpaqueToken`). We rarely deal with tokens directly; most
    methods accept a class name (`Foo`) or a string ("foo") and Angular converts it
    to a token. When we write `injector.get(Foo)`, the injector returns
    the value associated with the token for the `Foo` class, typically an instance of `Foo` itself.

    Angular makes similar requests internally during many of its operations
    as when it creates a [`Component`](#component) for display.

    The `Injector` maintains an internal map of tokens to dependency values.
    If the `Injector` can't find a value for a given token, it creates
    a new value using a `Provider` for that token.

    A [Provider](#provider) is a recipe for
    creating new instances of a dependency value associated with a particular token.

    An injector can only create a value for a given token if it has
    a `Provider` for that token in its internal provider registry.
    Registering providers is a critical preparatory step.

    Angular registers some of its own providers with every injector.
    We can register our own providers.

    Learn more in the [Dependency Injection](!{docsLatest}/guide/dependency-injection.html) chapter.
:marked
  ## Directive
.l-sub-section
  :marked
    An Angular class responsible for creating, re-shaping, and interacting with HTML elements
    in the browser DOM. Directives are Angular's most fundamental feature.

    A Directive is almost always associated with an HTML element or attribute.
    We often refer to such an element or attribute as the directive itself.
    When Angular finds a directive in an HTML template,
    it creates the matching directive class instance
    and gives that instance control over that portion of the browser DOM.

    Developers can invent custom HTML markup (e.g., `<my-directive>`) to
    associate with their custom directives. They add this custom markup to HTML templates
    as if they were writing native HTML. In this way, directives become extensions of
    HTML itself.

    Directives fall into one of three categories:

    1. [Components](#component) that combine application logic with an HTML template to
    render application [views]. Components are usually represented as HTML elements.
    They are the building blocks of an Angular application and the
    developer can expect to write a lot of them.

    1. [Attribute Directives](#attribute-directive) that can listen to and modify the behavior of
    other HTML elements, attributes, properties, and components. They are usually represented
    as HTML attributes, hence the name.

    1. [Structural Directives](#structural-directive), a directive responsible for
    shaping or re-shaping HTML layout, typically by adding, removing, or manipulating
    elements and their children.

.l-main-section#E

:marked
  ## ECMAScript
.l-sub-section
  :marked
    The [official JavaScript language specification](https://en.wikipedia.org/wiki/ECMAScript).

    The latest approved version of JavaScript is
    [ECMAScript 2016](http://www.ecma-international.org/ecma-262/7.0/)
    (AKA "ES2016" or "ES7") and many Angular 2 developers will write their applications
    either in this version of the language or a dialect that strives to be
    compatible with it such as [TypeScript](#typesScript).

    Most modern browsers today only support the much older "ECMAScript 5" (AKA ES5) standard.
    Applications written in ES2016, ES2015 or one of their dialects must be "[transpiled](#transpile)"
    to ES5 JavaScript.

    Angular 2 developers may choose to write in ES5 directly.

:marked
  ## ES2015
.l-sub-section
  :marked
    Short hand for "[ECMAScript 2015](#ecmascript=2015)".
:marked
  ## ES6
.l-sub-section
  :marked
    Short hand for "[ECMAScript 2015](#ecmascript=2015)".
:marked
  ## ES5
.l-sub-section
  :marked
    Short hand for "ECMAScript 5", the version of JavaScript run by most modern browsers.
    See [ECMAScript](#ecmascript).

a#F
a#G
a#H
.l-main-section#I
:marked
  ## 주입기 (Injector)
.l-sub-section
  :marked
    Angular [의존성 주입 시스템](#dependency-injection)에 포함되는 객체이며 
    대상의 캐시 내부에서 이름지어진 "의존성"을 찾거나 기록된 [공급자](#provider)와 함께 
    특정 대상을 만들어낼 수 있습니다.

:marked
  ## 입력 (Input)
.l-sub-section
  :marked
    [프로퍼티 바인딩](!{docsLatest}/guide/template-syntax.html#property-binding)의 
    ***대상***이 될 수 있는 지시 프로퍼티입니다. 데이터 값은 등호 우측의 템플릿 표현에서 
    식별된 데이터 소스에서부터 프로퍼티 *내부로* 흘러갑니다.

    [템플릿 문법](!{docsLatest}/guide/template-syntax.html#inputs-outputs) 챕터를 참고해주세오.

:marked
  ## 보간 (Interpolation)
.l-sub-section
  :marked
    이중 중괄호 사이에서 텍스트로 렌더링되는 [템플릿 표현](#template-expression) 내부의 
    [프로퍼티 데이터 바인딩](#data-binding)의 형식입니다. 이 텍스트는 엘리먼트의 프로퍼티에 할당되기 
    전에 이웃 텍스트와 연결되거나 아래 예시와 같이 엘리먼트 태그들 사이에서 표시될 것입니다.
    
  code-example(language="html" escape="html").
    <label>My current hero is {{hero.name}}</label>
    
  :marked
    보간에 대해서 더 알아보시려면 
    [템플릿 문법](!{docsLatest}/guide/template-syntax.html#interpolation) 챕터를 참고해주세요.

+ifDocsFor('ts')
  a#jit
  :marked
    ## 실시간 컴파일 (Just in Time (JIT) Compilation)
  .l-sub-section
    :marked
      Angular _실시간_ 부트스트래핑으로 여러분은 브라우저 내에 존재하는 여러분의 컴포넌트와 
      모듈을 컴파일할 수 있으며 어플리케이션을 동적으로 실행할 수 있습니다. 이는 개발 과정에서 좋은 선택지입니다. 
      생산용 앱을 대상으로 [AOT 컴파일](#aot) 모드를 권장합니다.
      
.l-main-section#K
:marked
  ## 케밥 표기법 (kebab-case)
.l-sub-section
  :marked
    [대시 표시법](#dash-case)을 참고하세요.

.l-main-section#L
:marked
  ## 생명주기 인용 (Lifecycle Hooks)
.l-sub-section
  :marked
    [지시자](#directive)와 [컴포넌트](#component)는 Angular가 지시자와 컴포넌트를 생성하고 
    갱신하고 제거할 때, Angular의 관리를 받는 생명주기를 가집니다.
    
    개발자들은 하나 또는 그 이상의 "생명주기 인용" 인터페이스를 구현하는 방식으로 
    특정 생명주기에서 중요한 기능을 활용할 수 있습니다.
    
    각각의 인터페이스는 하나의 인용 메소드를 소유하며 메소드명은 인터페이스명에서 앞부분에 `ng`가 추가된 형태입니다.
    예를 들어, `OnInit` 인터페이스는 `ngOnInit`이라는 인용 메소드를 소유합니다.
    
    Angular는 아래와 같은 순서로 인용 메소드들을 호출합니다:
    * `ngOnChanges` - [입력](#input)/[출력](#output)으로 묶인 값이 변화할 때 호출됩니다
    * `ngOnInit` - 최초의 `ngOnChanges` 이후에 호출됩니다
    * `ngDoCheck` - 개발자가 따로 설정한 변화를 탐지하면 호출됩니다
    * `ngAfterContentInit` - 컴포넌트 내용이 초기화된 이후 호출됩니다
    * `ngAfterContentChecked` - 모든 컴포넌트 내용을 확인한 이후 호출됩니다
    * `ngAfterViewInit` - 컴포넌트의 (다수의) 뷰가 초기화된 이후 호출됩니다
    * `ngAfterViewChecked` - 모든 컴포넌트의 (다수의) 뷰를 확인한 이후에 호출됩니다
    * `ngOnDestroy` - 지시자가 소멸되기 직전에 호출됩니다.
    
    [생명주기 인용](!{docsLatest}/guide/lifecycle-hooks.html) 챕터에서 자세히 살펴보세요.

:marked
  ## 모듈 (Module)
.l-sub-section
  block module-defn
    .alert.is-important
      :marked
        Angular에는 두 가지 타입의 모듈이 존재합니다:
        - [Angular 모듈](#angular-module).
        세부 내용과 예시를 확인하려면 [Angular Module](!{docsLatest}/guide/ngmodule.html) 챕터를 참조하세요.
        - 이 섹션에서 ES2015 모듈에 대해 서술되어있습니다.

    :marked
      Angular 앱은 모듈화되어있습니다.

      일반적으로, 우리는 우리의 어플리케이션을 다양한 모듈(우리 스스로 작성한 것과 다른 곳에서 
      가져온 것들)을 혼합하여 만들었습니다.
      
      모듈이란 하나의 목적만을 위한 결합력있는 코드의 블록을 의미합니다.

      모듈은 그 코드 내부의 어떤 값, 일반적으로 클래스로 구성된 하나의 대상을 **내보냅니다**.
      그 대상이 필요한 모듈은 그것을 **가져옵니다**.
      
      Angular 모듈의 구조와 import/export 문법은 
      [여기](http://www.2ality.com/2014/09/es6-modules-final.html)에 서술된 
      [ES2015](#es2015) 모듈 표준에 기반을 두고 있습니다.

      이 표준이 추가된 어플리케이션은 요청이 발생할 때 모듈을 불러오며, 
      모듈 간 의존성을 해결하기 위해 모듈 로더를 필요로합니다. Angular는 모듈 로더를 내장하지 않으며 
      어떤 특정 서드파티 라이브러리 (거의 모든 예시자료들이 SystemJS를 사용한다 하더라도)도 포함할 계획이 없습니다. 
      어플리케이션 개발자들은 표준에 따르는 모듈 라이브러리를 선택하여 사용해야 할 것입니다.
      
      모듈은 일반적으로 내보낸 대상이 정의된 파일에 따라서 명명됩니다. 추천 모듈에 포함된 
      Angular [데이터파이프](https://github.com/angular/angular/blob/master/modules/@angular/common/src/pipes/date_pipe.ts)
      클래스는 `data_pipe.ts`파일 내부에 `data_pipe`로 명명되었습니다.
      
      개발자들은 드물게 Angular 추천 모듈을 직접 엑세스합니다.
      우리는 주로 `@angular/core`같은 Angular의 [스코프 패키지](#scoped-package)중 하나로부터 그들을 가져옵니다.
      
a#N
.l-main-section#O

+ifDocsFor('ts|js')
  :marked
    ## Observable
  .l-sub-section
    :marked
      We can think of an observable as an array whose items arrive asynchronously over time.
      Observables help us manage asynchronous data, such as data coming from a backend service.
      Observables are used within Angular itself, including Angular's event system and its http client service.

      Observable은 시간의 흐름에 따라 비동기로 발생하는 데이터의 배열로 이해할 수 있습니다.
      Observable은 백엔드 서비스로부터 수신되는 정보처럼 비동기 데이터를 다룰 때 유용합니다.
      Angular의 이벤트 시스템과 http 클라이언트 서비스를 포함해서 Angular 내부에서도 Observable이 사용됩니다.

      To use observables, Angular uses a third-party library called Reactive Extensions (RxJS).
      Observables are a proposed feature for ES 2016, the next version of JavaScript.

      Angular에서는 Observable을 사용하기 위해서 3rd 라이브러리인 Reactive Extensions (RxJS)를 사용하고 있습니다.
      Observable은 JavaScript 다음 버전인 ES 2106에 포함될 기능으로 제안된 상태입니다.

:marked
  ## 출력 (Output)
.l-sub-section
  :marked
    A directive property that can be the ***target*** of an
    [Event Binding](!{docsLatest}/guide/template-syntax.html#property-binding).
    Events stream *out* of this property to the receiver identified
    in the template expression to the right of the equal sign.

    [이벤트 바인딩(Event Binding)](!{docsLatest}/guide/template-syntax.html#property-binding)의 ***대상***이 되는 지시자의 속성입니다.
    이벤트 스트림은 이 속성에서 *출력*되어 등호 우변의 템플릿 표현식에 지정된 수신자로 전달됩니다.

    See the [Template Syntax](!{docsLatest}/guide/template-syntax.html#inputs-outputs) chapter.

    자세한 내용은 [템플릿 문법](!{docsLatest}/guide/template-syntax.html#inputs-outputs) 챕터를 참고해주세요.

.l-main-section#P

:marked
  ## 파스칼 표기법 (PascalCase)
.l-sub-section
  :marked
    The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter.
    Class names are typically spelled in PascalCase. Examples include: `Person` and `HeroDetailComponent`.

    조합된 단어나 구문을 작성할 매 단어나 약어를 대문자로 시작하는 관례를 말합니다.
    클래스(Class)명은 일반적으로 파스칼 표기법으로 작성합니다. 예를 들면 `Person`이나 `HeroDetailComponent`가 있습니다.

    This form is also known as **upper camel case**, to distinguish it from **lower camel case** which we simply call [camelCase](#camelcase).
    In this documentation, "PascalCase" means *upper camel case* and  "camelCase" means *lower camel case*.

    파스칼 케이스 형태는 간단히 [카멜 표기법(camelCase)](#camelcase)으로 부르는 **lower camel case**와 구분하기 위해서 **upper camel case**로 알려져 있습니다.
    이 문서에서 파스칼 표기법은 *upper camel case*이고 카멜 표기법(camelCase)은 *lower camel case*를 의미합니다.

:marked
  ## 파이프 (Pipe)
.l-sub-section
  :marked
    An Angular pipe is a function that transforms input values to output values for
    display in a [view](#view). We use the `!{_at}Pipe` !{_decoratorLink}
    to associate the pipe function with a name. We can then use that
    name in our HTML to declaratively transform values on screen.

    Angular의 파이프(pipe)는 입력값을 [뷰(view)](#view)에 표현하기 위한 출력값으로 변환시키는 함수입니다.
    파이프함수에 이름을 부여하기 위해서 `!{_at}Pipe` !{_decoratorLink}를 사용합니다.
    이 이름이 HTML 안에서 사용되어 화면 상의 값을 선언적으로 변환합니다.

    Here's an example that uses the built-in `currency` pipe to display
    a numeric value in the local currency.

    다음의 예제는 내장 파이프 `currency`를 사용하여 숫자형 값을 지역 통화로 표현하는 방법입니다.

  code-example(language="html" escape="html").
    <label>Price: </label>{{product.price | currency}}
  :marked
    Learn more in the chapter on [pipes](!{docsLatest}/guide/pipes.html) .

    자세한 내용은 [파이프(pipes)](!{docsLatest}/guide/pipes.html) 챕터에서 확인하세요.

- var _ProviderUrl = docsLatest+'/api/'+(lang == 'dart' ? 'angular2.core' : 'core/index')+'/Provider-class.html'
:marked
  ## 공급자 (Provider)
.l-sub-section
  :marked
    A [Provider](!{_ProviderUrl}) creates a new instance of a dependency for the
    [Dependency Injection](#dependency-injection) system.
    It relates a lookup token to code &mdash; sometimes called a "recipe" &mdash;
    that can create a dependency value.

    [공급자(Provider)](!{_ProviderUrl})는 [의존성 주입(Dependency Injection)](#dependency-injection) 시스템을 위해서 새로운 의존 인스턴스를 생성합니다.
    공급자는 조회용 토큰을 소위 조리법(recipe)이라 불리우는 의존값을 생성할 수 있는 코드와 연결시킵니다.

a#Q
.l-main-section#R

+ifDocsFor('ts|js')
  :marked
    ## Reactive Forms
  .l-sub-section
    :marked
      A technique for building Angular forms through code in a component.
      The alternate technique is [Template-Driven Forms](#template-driven-forms).

      When building reactive forms:
      - The "source of truth" is the component. The validation is defined using code in the component.
      - Each control is explicitly created in the component class with `new FormControl()` or with `FormBuilder`.
      - The template input elements do *not* use `ngModel`.
      - The associated Angular directives are all prefixed with `Form` such as `FormGroup`, `FormControl`, and `FormControlName`.

      Reactive forms are powerful, flexible, and great for more complex data entry form scenarios, such as dynamic generation
      of form controls.

:marked
  ## Router
.l-sub-section
  :marked
    Most applications consist of many screens or [views](#view).
    The user navigates among them by clicking links and buttons
    and taking other similar actions that cause the application to
    replace one view with another.

    The Angular [Component Router](!{docsLatest}/guide/router.html) is a richly featured mechanism for configuring
    and managing the entire view navigation process including the creation and destruction
    of views.
  +ifDocsFor('ts|js')
    :marked
      In most cases, components becomes attached to a [router](#router) by means
      of a `RouterConfig` that defines routes to views.

      A [routing component's](#routing-component) template has a `RouterOutlet` element
      where it can display views produced by the router.

      Other views in the application likely have anchor tags or buttons with `RouterLink`
      directives that users can click to navigate.

      See the [Component Router](!{docsLatest}/guide/router.html) chapter to learn more.

+ifDocsFor('ts|js')
  :marked
    ## RouterModule
  .l-sub-section
    :marked
      A separate [Angular module](#angular-module) that provides the necessary service providers and directives for navigating through application views.

      See the [Component Router](!{docsLatest}/guide/router.html) chapter to learn more.

:marked
  ## Routing Component
.l-sub-section
  block routing-component-defn
    :marked
      An Angular [Component](#component) with a RouterOutlet that displays views based on router navigations.

      See the [Component Router](!{docsLatest}/guide/router.html) chapter to learn more.

.l-main-section#S

+ifDocsFor('ts|js')
  :marked
    ## Scoped Package
  .l-sub-section
    :marked
      Angular modules are delivered within *scoped packages* such as `@angular/core`, `@angular/common`, `@angular/platform-browser-dynamic`,
      `@angular/http`, and `@angular/router`.

      A [*scoped package*](https://docs.npmjs.com/misc/scope) is a way to group related *npm* packages.

      We import a scoped package the same way we'd import a *normal* package.
      The only difference, from a consumer perspective,
      is that the package name begins with the Angular *scope name*, `@angular`.

    +makeExcerpt('architecture/ts/app/app.component.ts', 'import', '')

a#snake-case
:marked
  ## snake_case

.l-sub-section
  block snake-case-defn
    :marked
      The practice of writing compound words or phrases such that each word is separated by an
      underscore (`_`). This form is also known as **underscore case**.

:marked
  ## Service
.l-sub-section
  :marked
    Components are great and all, but what do we do with data or logic that are not associated
    with a specific view or that we want to share across components? We build services!

    Applications often require services such as a hero data service or a logging service.
    Our components depend on these services to do the heavy lifting.

    A service is a class with a focused purpose.
    We often create a service to implement features that are
    independent from any specific view,
    provide share data or logic across components, or encapsulate external interactions.

    See the [Services](!{docsLatest}/tutorial/toh-pt4.html) chapter of the tutorial to learn more.

:marked
  ## Structural Directive
.l-sub-section
  :marked
    A category of [Directive](#directive) that can
    shape or re-shape HTML layout, typically by adding, removing, or manipulating
    elements and their children.

    The `ngIf` "conditional element" directive and the `ngFor` "repeater" directive are
    good examples in this category.

    See the [Structural Directives](!{docsLatest}/guide/structural-directives.html) chapter to learn more.

.l-main-section#T
:marked
  ## Template
.l-sub-section
  :marked
    A template is a chunk of HTML that Angular uses to render a [view](#view) with
    the support and continuing guidance of an Angular [Directive](#directive),
    most notably a [Component](#component).

    We write templates in a special [Template Syntax](!{docsLatest}/guide/template-syntax.html).

+ifDocsFor('ts|js')
  :marked
    ## Template-Driven Forms
  .l-sub-section
    :marked
      A technique for building Angular forms using HTML forms and input elements in the view.
      The alternate technique is [Reactive Forms](#reactive-forms).

      When building template-driven forms:
      - The "source of truth" is the template. The validation is defined using attributes on the individual input elements.
      - [Two-way binding](#data-binding) with `ngModel` keeps the component model in synchronization with the user's entry into the input elements.
      - Behind the scenes, Angular creates a new control for each input element that has a `name` attribute and
      two-way binding set up.
      - The associated Angular directives are all prefixed with `ng` such as `ngForm`, `ngModel`, and `ngModelGroup`.

      Template-driven forms are convenient, quick, and simple and are a good choice for many basic data entry form scenarios.

      Learn how to build template-driven forms
      in the [Forms](!{docsLatest}/guide/forms.html) chapter.

:marked
  ## Template Expression
.l-sub-section
  :marked
    An expression is a !{_Lang}-like syntax that Angular evaluates within
    a [data binding](#data-binding).  Learn how to write template expressions
    in the [Template Syntax](!{docsLatest}/guide/template-syntax.html#template-expressions) chapter.

:marked
  ## Transpile
.l-sub-section
  :marked
    The process of transforming code written in one form of JavaScript
    (e.g., TypeScript) into another form of JavaScript  (e.g., [ES5](#es5)).

 :marked
  ## TypeScript
.l-sub-section
  :marked
    A version of JavaScript that supports most [ECMAScript 2015](#ecmascript=2015)
    language features and many features that may arrive in future versions
    of JavaScript such as [Decorators](#decorator).

    TypeScript is also noteable for its optional typing system which gives
    us compile-time type-checking and strong tooling support (e.g. "intellisense",
    code completion, refactoring, and intelligent search). Many code editors
    and IDEs support TypeScript either natively or with plugins.

    TypeScript is the preferred language for Angular 2 development although
    we are welcome to write in other JavaScript dialects such as [ES5](#es5).

    Learn more about TypeScript on its [website](http://www.typescriptlang.org/).

a#U
.l-main-section#V

:marked
  ## View
.l-sub-section
  :marked
    A view is a portion of the screen that displays information and responds
    to user actions such as clicks, mouse moves, and keystrokes.

    Angular renders a view under the control of one or more [Directives](#directive),
    especially  [Component](#component) directives and their companion [Templates](#template).
    The Component plays such a prominent role that we often
    find it convenient to refer to a component as a view.

    Views often contain other views and any view might be loaded and unloaded
    dynamically as the user navigates through the application, typically
    under the control of a [router](#router).

a#W
a#X
a#Y
.l-main-section#Z

:marked
  ## 구역 (Zone)
.l-sub-section
  block zone-defn
    :marked
      구역은 자바스크립트 어플리케이션의 비동기 활동을 캡슐화하고 차단하기 위한 메커니즘입니다.

      브라우저 DOM과 자바스크립트는 DOM 이벤트(클릭 이벤트 등), [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), 
      그리고 원격 서버에 보내는 [XHR](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) 호출같이 
      제한된 수의 비동기 활동을 보유합니다.

      구역은 위와같은 활동들을 모두 차단하며 "구역 클라이언트"에 비동기 활동이 완료되기 전후로 동작을 
      실행할 기회를 줍니다.

      Angular는 데이터의 변화를 확인하고 [데이터 바인딩](#data-binding)을 통해 어플리케이션이 
      보여주는 정보를 갱신함으로써 비동기 이벤트에 반응할 수 있는 구역 안에 존재하는 여러분의 
      어플리케이션을 실행합니다.

      [Brian Ford의 영상](https://www.youtube.com/watch?v=3IqtmUscE_U)에서 구역에 대해 더 알아보세요.
