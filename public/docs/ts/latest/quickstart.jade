block includes
  include _util-fns
  - var _Install = 'Install'
  - var _prereq = 'Node.js and npm'
  - var _angular_browser_uri = '@angular/platform-browser-dynamic'
  - var _angular_core_uri = '@angular/core'
  - var _stepInit = 3 // Step # after NgModule step
  - var _quickstartSrcURL='https://github.com/angular/quickstart/blob/master/README.md'

//- TS/Dart shared step counter
- var step = _stepInit
- var stepKOR = _stepInit

:marked
  이 빠른시작 가이드는 #{_Lang}으로 만든 간단한 Angular 2 어플리케이션을 어떻게 빌드하고 실행할지 안내합니다. 
  또한 이 가이드에서 전반적으로 사용된 코드 예시를 통해 일반적인 개발 환경을 설정해줍니다.
  
  This QuickStart guide demonstrates how to build and run a simple Angular 2 application in #{_Lang}.
  It also establishes a common development environment used throughout the code examples in these
  guides.


.callout.is-helpful
  header #{_Lang}을 사용하고싶지 않으신가요?
  header Don't want #{_Lang}?
  p.
    비록 여러분이 #{_Lang}을 처음 접하시더라도, 여러분은 Angular 2 어플리케이션을 자바스크립트와 
    #{_docsFor == 'ts' ? 'Dart' : 'TypeScript'}로도 작성하실 수 있습니다. 이 가이드에서 개발 언어를 
    변경하시려면 베너의 언어 선택버튼을 사용해주세요.
  p.
    Although you're getting started in #{_Lang}, you can also write Angular 2 applications
    in JavaScript and #{_docsFor == 'ts' ? 'Dart' : 'TypeScript'}. Use the language selector in the
    banner to switch development languages for this guide.  
.l-main-section
h1 개요
h1 Overview

aside.is-right
  :marked
    <a href="http://plnkr.co/" title="Plunker" target="_blank">Plunker</a>에 
    완성된 어플리케이션이 유효한 예시 링크로 올려져있으므로 여러분은 이러한 코드와 상호작용하실 수 있습니다. 
    여러분들은 대부분의 섹션을 시작할 때 유효한 예시들을 찾으실 수 있습니다.

    The live example link opens the finished application in
    <a href="http://plnkr.co/" title="Plunker" target="_blank">Plunker</a> so that you can interact
    with the code. You'll find live examples at the start of most sections.

:marked
  빠른시작 어플리케이션은 실제로 사용되는 Angular 어플리케이션 구조를 가지고 있으며 간단한 메시지를 보여줍니다:

  The QuickStart application has the structure of a real-world Angular application and
  displays the simple message:
  

figure.image-display
  img(src='/resources/images/devguide/quickstart/my-first-app.png' alt="Output of QuickStart app")

:marked
  **확인해보세요**. <live-example></live-example>의 링크입니다.

  **Try it out**. Here's a link to a <live-example></live-example>.

  여러분들은 깃허브에서 <a href="https://github.com/angular/quickstart/blob/master/README.md" target="_blank">
  빠른시작 어플리케이션 전부</a>를 복제할 수 있습니다.

  You can also <a href="https://github.com/angular/quickstart/blob/master/README.md" target="_blank">
  clone the entire QuickStart application</a> from GitHub.
  
h2 이 어플리케이션을 만들어보세요!
h2 Build this application!

:marked
  - [시작하기전에](#prereq): Node.js와 npm을 설치해주세요.
  - [Prerequisite](#prereq): Install #{_prereq}.
  - [1단계](#create-and-configure): 프로젝트를 생성하고 구성작업을 해주세요.
  - [Step 1](#create-and-configure): Create and configure the project.
  <span if-docs="ts"><li>[2단계](#ngmodule): 어플리케이션을 생성해주세요.</span>
  <span if-docs="ts"><li>[Step 2](#ngmodule): Create your application.</span>
  - [!{stepKOR++}단계](#root-component): 컴포넌트를 생성하고 여러분의 어플리케이션에 추가해주세요.
  - [Step !{step++}](#root-component): Create a component and add it to your application.
  - [!{stepKOR++}단계](#main): 어플리케이션을 시작해주세요.
  - [Step !{step++}](#main): Start up your application.
  - [!{stepKOR++}단계](#index): 어플리케이션을 호스트하는 웹 페이지를 정의해주세요.
  - [Step !{step++}](#index): Define the web page that hosts the application.
  - [!{stepKOR++}단계](#build-and-run): 어플리케이션을 빌드하고 실행해주세요.
  - [Step !{step++}](#build-and-run): Build and run the application.
  - [!{stepKOR++}단계](#make-changes): 실시간 변화를 만들어주세요.
  - [Step !{step++}](#make-changes): Make some live changes.
  - [마무리하시고 다음 단계로 넘어가주세요](#wrap-up)
  - [Wrap up and Next Steps](#wrap-up)


- var step = _stepInit // reinitialize step counter for headers to come

.l-main-section#prereq
h1 시작하기전에: Node.js와 npm을 설치해주세요
h1 Prerequisite: Install #{_prereq}

block setup-tooling
  :marked
    만약 당신의 기기에 Node.js와 npm이 설치되어있지 않다면 <a href="http://blog.npmjs.org/post/85484771375/how-to-install-npm"
    target="_blank">설치해주세요</a>. 우리의 예제들은 node **v5.x.x** 이상, npm **v3.x.x** 이상을 요구합니다. 
    여러분이 사용하고 있는 버전을 확인하시려면 터미널 창에서 `node -v`와 `npm -v`를 입력해주세요.
  :marked
    If Node.js and npm aren't already on your machine, <a href="http://blog.npmjs.org/post/85484771375/how-to-install-npm"
    target="_blank">install them</a>. Our examples require node **v5.x.x** or higher and
    npm **3.x.x** or higher. To check which version you are using, run `node -v` and `npm -v`
    in a terminal window.

aside.is-right
  :marked
    코드 예제에서 텍스트를 쉽게 복사하려면, 예제 박스의 우측 상단에 있는 *클립보드로 복사하기* 아이콘
    (<i class="material-icons" style="font-size: 100%">content_copy </i>)을 클릭해주세요.
  :marked
    To easily copy text from a code example, click the *Copy to Clipboard* icon (<i
    class="material-icons" style="font-size: 100%">content_copy </i>) in the upper right corner of
    the example box.

.l-main-section
h1#create-and-configure 1단계: 프로젝트를 생성하고 구성작업을 해주세요
h1#create-and-configure Step 1: Create and configure the project

- var _package_and_config_files = _docsFor == 'dart' ? 'pubspec.yaml' : 'configuration files'

:marked
  이 단계에서 여러분들은:
  * [프로젝트 폴더를 생성합니다](#create-the-project-folder)
  * [설정 파일들을 생성합니다](#add-config-files)
  * [패키지들을 설치합니다](#install-packages)
:marked
  In this step you will:
  * [Create the project folder](#create-the-project-folder)
  * [Create #{_package_and_config_files}](#add-config-files)
  * [#{_Install} packages](#install-packages)

h2#create-the-project-folder 프로젝트 폴더를 생성합니다
h2 Create the project folder
:marked
  터미널 창을 활용하여, 프로젝트로 사용할 폴더를 만들고 해당 폴더로 이동해주세요.
:marked
  Using a terminal window, create a directory for the project, and change into this
  directory.

- var _ = _docsFor == 'dart' ? '_' : '-';
code-example(language="sh").
  mkdir angular2!{_}quickstart
  cd    angular2!{_}quickstart

h2#add-config-files 설정 파일들을 생성합니다
h2#add-config-files Create #{_package_and_config_files}
block package-and-config-files
  - var _tsconfigUri = 'guide/typescript-configuration.html#tsconfig'

  p 우리의 Angular 프로젝트는 일반적으로 몇개의 설정 파일들이 필요합니다:
  p Our typical Angular project needs several configuration files:
  ul
    li.
      #[b package.json]는 프로젝트에 사용되는 npm 패키지 의존성을 명시합니다.
    li.
      #[b package.json] identifies npm package dependencies for the project.
    li.
      #[b tsconfig.json]는 타입스크립트 컴파일러가 프로젝트의 파일로부터 어떻게 자바스크립트를 생성하는지 정의합니다.
    li.
      #[b tsconfig.json] defines how the TypeScript compiler generates JavaScript from the project's
      files.
    li.
      #[b typings.json]는 타입스크립트 컴파일러가 기본적으로 인식하지 못하는 라이브러리를 위한 추가적인 정의 파일을 제공합니다.
    li.
      #[b typings.json] provides additional definition files for libraries that the TypeScript
      compiler doesn't natively recognize.
    li.
      #[b systemjs.config.js]는 모듈 로더에게 어디서 어플리케이션 모듈을 찾는지에 대한 정보를 제공하며 모든 필요한 패키지들을 등록합니다. 
      이 파일은 또한 이후에 나올 문서 예제에 필요한 다른 패키지들을 포함하고 있습니다.
    li.
      #[b systemjs.config.js] provides information to a module loader about where to find
      application modules, and registers all the necessary packages. It also
      contains other packages that will be needed by later documentation examples.

  p.
    위 파일들을 여러분의 프로젝트 폴더에 생성해주세요. 아래의 예시 박스의 탭마다 적힌 텍스트를 붙여넣기하여 파일 내용을 채워넣으세요.
  p.
    Create each of these files in your project directory. Populate them by pasting in text from
    the tabs in the example box below.

  a#config-files
  +makeTabs(`
      quickstart/ts/package.1.json,
      quickstart/ts/tsconfig.1.json,
      quickstart/ts/typings.1.json,
      quickstart/ts/systemjs.config.1.js
    `, '', `
      package.json,
      tsconfig.json,
      typings.json,
      systemjs.config.js
    `)

  p.
    #[a(href="guide/npm-packages.html") Npm 패키지 설정하기] 가이드와 
    #[a(href="#{_tsconfigUri}") 타입스크립트 설정하기] 가이드를 통해 위 설정 파일들에 대해서 더 알아보세요. 
    모듈 로딩에 대한 세부적인 토론사항은 이 가이드에서 다루지 않습니다.
  p.
    Learn more about these configuration files in the
    #[a(href="guide/npm-packages.html") Npm Package Configuration] guide and the
    #[a(href="#{_tsconfigUri}") TypeScript Configuration] guide.
    A detailed discussion of module loading is beyond the scope of this guide.

  .callout.is-helpful
    header SystemJS와 Webpack?
    header SystemJS or Webpack?
    p.
      비록 우리가 설명을 위해 SystemJS를 사용하고 있지만, SystemJS는 모듈을 로딩하는 한 가지 선택사항일 뿐입니다. 
      여러분이 선호하는 모듈 로더를 사용해주세요. Webpack과 Angular 함께 사용하기를 알아보시려면, <a
      href="guide/webpack.html" > Webpack: 시작하기</a>를 참고해주세요. 또는 SystemJS 일반적인 설정을 더 알아보시려면 
      <a href="https://github.com/systemjs/systemjs/blob/master/docs/config-api.md" target="_blank">여기</a>를 참고해주세요.
    p.
      Although we use SystemJS for illustrative purposes here, it's only one option for loading
      modules. Use the module loader that you prefer. For Webpack and Angular, see <a
      href="guide/webpack.html" >
      Webpack: an Introduction</a>. Or, learn more about SystemJS configuration in general 
      <a href="https://github.com/systemjs/systemjs/blob/master/docs/config-api.md" target="_blank">here</a>.


  h2#install-packages 패키지들을 설치합니다
  h2#install-packages #{_Install} packages
block install-packages
  :marked
    커맨드 라인에서 npm을 사용하여, `package.json`에 나열된 패키지들을 아래의 명령어를 입력하여 설치해주세요:
  :marked
    Using npm from the command line, install the packages listed in `package.json` with the command:

  code-example(language="sh").
    npm install

  :marked
    설치 과정에서 &mdash;붉은색으로 표시되는&mdash; 에러 메시지가 나타날 것이며, 여러분들은 `npm WARN` 메시지를 보게될 것입니다. 
    설치 과정이 `npm ERR!`메시지로 끝나지 않는다면, 여러분들은 성공한 것으로 인식하면 됩니다.
  :marked
    Error messages&mdash;in red&mdash;might appear during the install, and you might see `npm WARN` messages. As long as there are no `npm ERR!` messages at the end, you can assume success.

  :marked
    여러분들은 이제 아래와같은 구조의 화면을 보실 수 있습니다:
  :marked
    You should now have the following structure:

  .filetree
    .file angular2-quickstart
    .children
      .file node_modules ...
      .file typings ...
      .file package.json
      .file systemjs.config.js
      .file tsconfig.json
      .file typings.json

  :marked
    만약 `npm install`을 실행한 이후에 `typings` 폴더가 나타나지 않는다면, 여러분들은 수동으로 명령어를 입력하여 그것을 설치해야합니다:
  :marked
    If the `typings` folder doesn't show up after running `npm install`, you'll need to install it manually with the command:

  code-example(language="sh").
      npm run typings install

:marked
  이제 여러분들은 코드를 작성할 준비가 되었습니다!
:marked
  You're now ready to write some code!
  
+ifDocsFor('ts')
  .l-main-section
  h1#ngmodule Step 2: Create your application
  :marked
    You compose Angular applications into closely related blocks of functionality with
    [NgModules](guide/ngmodule.html). Angular itself is split into separate Angular Modules. This
    makes it possible for you to keep payload size small by only importing the parts of Angular
    that your application needs.

    Every Angular application has at least one module: the _root module_, named `AppModule` here.

    **Create #{_an} #{_appDir} subfolder** off the project root directory:

  code-example.
    mkdir #{_appDir}

  :marked
    Create the file `app/app.module.ts` with the following content:

  +makeExample('app/app.module.1.ts')(format='.')

  :marked
    This is the entry point to your application.

    Since the QuickStart application is a web application that runs in a browser, your root module
    needs to import the
    [`BrowserModule`](../latest/api/platform-browser/index/BrowserModule-class.html)
    from `@angular/platform-browser` to the `imports` array.

    This is the smallest amount of Angular that is needed for a minimal application to run in the
    browser.

    The QuickStart application doesn't do anything else, so you don't need any other modules. In a real
    application, you'd likely import [`FormsModule`](../latest/api/forms/index/FormsModule-class
    .html) as well as [`RouterModule`](../latest/api/router/index/RouterModule-class.html) and
    [`HttpModule`](../latest/api/http/index/HttpModule-class.html). These are introduced in the
    [Tour of Heroes Tutorial](./tutorial/).


.l-main-section
h1#root-component Step !{step++}: Create a component and add it to your application
:marked
  Every Angular application has at least one component: the _root component_, named `AppComponent`
  here.

  Components are the basic building blocks of Angular applications. A component controls a portion
  of the screen&mdash;a *view*&mdash;through its associated template.

a#app-component
p.
  #[b Create the component file]
  #[code #[+adjExPath('app/app.component.ts')]] with the following content:

+makeExample('app/app.component.ts')

:marked
  The QuickStart application has the same essential structure as any other Angular component:

    * **An import statement**. Importing gives your component access to
    Angular's core [`@Component` decorator function](../latest/api/core/index/Component-decorator
    .html).
    * **A @Component #{_decorator}** that associates *metadata* with the
        `AppComponent` component class:

        - a *selector* that specifies a simple CSS selector for an HTML element that represents
          the component.
        - a *template* that tells Angular how to render the component's view.
    * **A component class** that controls the appearance and behavior of a view
    through its template. Here, you only have the root component, `AppComponent`. Since you don't
    need any application logic in the simple QuickStart example, it's empty.

  You *export* the `AppComponent` class so that you can *import* it into the application that you
   just created.

  Edit the file `app/app.module.ts` to import your new `AppComponent` and add it in the
  declarations and bootstrap fields in the `NgModule` decorator:

+makeExample('app/app.module.ts', null, title='app/app.module.ts')

.l-main-section
h1#main Step !{step++}: Start up your application

block create-main
  :marked
    Now you need to tell Angular to start up your application.

    Create the file `app/main.ts` with the following content:

+makeExample('app/main.ts')


- var _pBD_bootstrapModule = _docsFor == 'dart' ? _bootstrapModule : 'platformBrowserDynamic().bootstrapModule'

:marked
  This code initializes the platform that your application runs in, then uses the platform to
  bootstrap your `!{_AppModuleVsAppComp}`.

  ### Why create separate *<span ngio-ex>main.ts</span>*<span if-docs="ts">, app module</span> and app component files?

  App bootstrapping is a separate concern from<span if-docs="ts"> creating a module or</span>
  presenting a view. Testing the component is much easier if it doesn't also try to run the entire application.


.callout.is-helpful
  header Bootstrapping is platform-specific

  :marked
    Because the QuickStart application runs directly in the browser, `main.ts` imports the
    `!{_platformBrowserDynamicVsBootStrap}` function from `#{_angular_browser_uri}`, not
    `#{_angular_core_uri}`. On a mobile device, you might load a !{_moduleVsComp} with
    [Apache Cordova](https://cordova.apache.org/) or
    [NativeScript](https://www.nativescript.org/), using a bootstrap function that's specific
    to that platform.

.l-main-section
h1#index Step !{step++}: Define the web page that hosts the application
:marked
  In the *#{_indexHtmlDir}* folder,
  create an `index.html` file and paste the following lines into it:

+makeExample('index.html')


+ifDocsFor('ts')
:marked
  The noteworthy sections here are:

  * JavaScript libraries: `core-js` polyfills for older browsers, the `zone.js` and
  `reflect-metadata` libraries needed by Angular, and the `SystemJS` library for module loading.
  * Configuration file for `SystemJS`, and a script
     where you import and run the `app` module which refers to the `main` file that you just
     wrote.
  * The [`<my-app>`](#my-app) tag in the `<body>` which is *where your app lives!*


:marked
  ## Add some style
  Styles aren't essential, but they're nice, and `index.html` assumes that you have
  a stylesheet called `styles.css`.

  Create a `styles.css` file in the *#{_indexHtmlDir}* folder, and start styling,
  perhaps with the minimal styles shown below.

+makeExcerpt('styles.css (excerpt)', 'quickstart')

.callout.is-helpful
  :marked
    For the full set of master styles used by the documentation samples,
    see [styles.css](https://github.com/angular/angular.io/blob/master/public/docs/_examples/styles.css).

.l-main-section#build-and-run
h1 Step !{step++}: Build and run the application
block run-app
  :marked
    Open a terminal window and enter this command:
  code-example.
    npm start
aside.is-right
  :marked
    [Read more](https://github.com/angular/quickstart/blob/master/README.md#npm-scripts) about
    other useful npm scripts included in this example's `package.json`.

:marked
  That command runs the following two parallel node processes:
  * The TypeScript compiler in watch mode.
  * A static file server called _lite-server_ that loads `index.html` in a browser
  and refreshes the browser when application files change.

  In a few moments, a browser tab should open and display the following:

figure.image-display
  img(src='/resources/images/devguide/quickstart/my-first-app.png' alt="Output of QuickStart app")


block build-app
  //- Nothing for ts.

.l-main-section#make-changes
h1 Step !{step++}: Make some live changes
:marked
  Try changing the message in `app/app.component.ts` to "My SECOND Angular 2 App".
block server-watching
  :marked
    The TypeScript compiler and `lite-server` will detect your change, recompile the TypeScript into JavaScript,
    refresh the browser, and display your revised message.


    Close the terminal window when you're done to terminate both the compiler and the server.

.l-main-section
h1#wrap-up Wrap up and next steps
:marked
  The final project folder structure looks like this:
block project-file-structure
  .filetree
    .file angular2-quickstart
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
        .file main.ts
      .file node_modules ...
      .file typings ...
      .file index.html
      .file package.json
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
      .file typings.json
:marked
  To see the file contents, open the <live-example></live-example>.

.l-main-section
:marked
  ## What next?
  This first application doesn't do much. It's basically "Hello, World" for Angular 2.

  You wrote a little Angular component, created a simple `index.html`, and launched with a
  static file server.

+ifDocsFor('ts')
  :marked
    You also created the basic application setup that you'll re-use for other
    sections in this guide. From here, the changes you'll make in the
    `package.json` or `index.html` files are only minor updates to add libraries or some css
    stylesheets. You also won't need to revisit module loading again.
:marked
  To take the next step and build a small application that demonstrates real features that you can
  build with Angular, carry on to the [Tour of Heroes tutorial](./tutorial)!
