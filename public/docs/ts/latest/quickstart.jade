block includes
  include _util-fns

:marked
  Angular 애플리케이션은 _컴포넌트_로 이루어져 있습니다.

  Angular applications are made up of _components_.
    
    _컴포넌트_는 HTML템블릿과 화면의 일부를 제어하는 컴포넌트 클래스의 조합입니다. 다음은 간단한 문자열을 표시한는 컴포넌트의 예시입니다.
  
    A _component_ is the combination of an HTML template and a component class that controls a portion of the screen. Here is an example of a component that displays a simple string:

+makeExample('src/app/app.component.ts')(format='.')

block qs-src-online-and-local
  .l-sub-section
    :marked
      별도의 설치 없이 **<live-example>Plunker의 빠른시작 예제</live-example>**를 확인해보세요.

      Try this **<live-example>QuickStart example on Plunker</live-example>** without installing anything.

      [***빠른시작 시드***](guide/setup.html "Setup for local development with the QuickStart seed")에서 로컬로 확인하고, 실제 Angular 애플리케이션 개발을 위해 준비하세요.
      
      Try it locally with the [***QuickStart seed***](guide/setup.html "Setup for local development with the QuickStart seed")
      and prepare for development of a real Angular application.

:marked
  모든 컴포넌트는 _메타데이터_ 객체를 갖고 있는 `@Component` [!{_decorator}](glossary.html#!{_decorator} '"!{_decorator}" explained')
  <span if-docs="ts">함수</span>로 시작합니다.<span if-docs="ts">메타데이터 객체</span>는 HTML 템플릿과 컴포넌트 클래스가 함께 작동하는 방식을 보여줍니다.

  Every component begins with an `@Component` [!{_decorator}](glossary.html#!{_decorator} '"!{_decorator}" explained') <span if-docs="ts">function</span> that takes a _metadata_ object. The metadata object describes how the HTML template and component class work together.

  `selector` 속성은 Angular가 `index.html`의 `<my-app>`태그 안에 있는 컴포넌트를 표시하도록 합니다.

  The `selector` property tells Angular to display the component inside a custom `<my-app>` tag in the `index.html`.
<<<<<<< HEAD

+makeExample('index.html','my-app','index.html (inside <body>)')(format='.')
=======
+makeExample('src/index.html','my-app','index.html (inside <body>)')(format='.')
>>>>>>> acfd22c96bc4619e7aa6cc3c2c75c510173543fb
:marked
  `템플릿` 속성은 `<h1>` 헤더 내부의 메세지를 정의합니다. 
  그 메세지는 Angular의 [interpolation binding](guide/displaying-data.html) 표현방식대로, "Hello"로 시작하고 `{{name}}`으로 끝납니다. 
  동작할 때, Angular는 `{{name}}`을 컴포넌트의 `name`속성값으로 대체합니다.
  Interpolation binding은 이 문서에서 볼 수 있는 많은 Angular의 특징 중 하나입니다.

  The `template` property defines a message inside an `<h1>` header.
  The message starts with "Hello" and ends with `{{name}}`,
  which is an Angular [interpolation binding](guide/displaying-data.html) expression.
  At runtime, Angular replaces `{{name}}` with the value of the component's `name` property.
  Interpolation binding is one of many Angular features you'll discover in this documentation.

+ifDocsFor('ts')
  :marked
    이 예제에서 컴포넌트 클래스인 `name` 속성을 `'Angular'`에서 `'World'`로 바꾸고, 어떤 일이 발생하는 지 확인하세요.

    In the example, change the component class's `name` property from `'Angular'` to `'World'` and see what happens.

  .callout.is-helpful
    header TypeScript 관련 한 마디
    header A word about TypeScript

    p.
      이 예제는 JavaScript의 친구인 <a href="http://www.typescriptlang.org/" target="_blank" title="TypeScript">TypeScript</a>로 작성되었습니다. TypeScript의 타입은 도구로써 개발자 생산성 향상에 도움을 주기 때문에, Angular는 TypeScript를 이용합니다. Angular코드는 JavaScript로도 작성할 수 있습니다. 그 방법은 <a href="cookbook/ts-to-js.html">가이드</a>에서 확인하세요.
    p.
      This example is written in <a href="http://www.typescriptlang.org/" target="_blank" title="TypeScript">TypeScript</a>, a superset of JavaScript. Angular
      uses TypeScript because its types make it easy to support developer productivity with tooling. You can also write Angular code in JavaScript; <a href="cookbook/ts-to-js.html">this guide</a> explains how.

.l-sub-section
    :marked
        ### 다음 단계
        
        ### Next step

        [**Angular 학습**](guide/learning-angular.html "Learning Angular") 시작하기.

        Start [**learning Angular**](guide/learning-angular.html "Learning Angular").

