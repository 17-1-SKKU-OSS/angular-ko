include ../_util-fns
  
:marked
  이 요리책은 빌드 프로세스 중에 _사전_컴파일하여 성능을 크게 향상시키는 방법을 설명합니다.
  
  This cookbook describes how to radically improve performance by compiling _Ahead of Time_ (AOT) 
  during a build process.

a#toc
:marked
  ## 컨텐츠 목차
  ## Table of Contents
  * [개요](#overview)
  * [Overview](#overview)
  * [_사전(Ahead-of-Time)_ vs _적기(Just-in-Time)_](#aot-jit)
  * [_Ahead-of-Time_ vs _Just-in-Time_](#aot-jit)
  * [사전 컴파일](#compile)
  * [Compile with AOT](#compile)
  * [부트스트랩](#bootstrap)
  * [Bootstrap](#bootstrap)
  * [Tree Shaking](#tree-shaking)
  * [Tree Shaking](#tree-shaking)
  * [번들 로드](#load)
  * [Load the bundle](#load)
  * [앱 제공](#serve)
  * [Serve the app](#serve)
  * [소스 코드](#source-code)
  * [Source Code](#source-code)
  * [히어로 투어](#toh)
  * [Tour of Heroes](#toh)

a#overview
.l-main-section
:marked
  ## 개요
  ## Overview

  Angular 애플리케이션은 주로 컴포넌트와 HTML 템플릿으로 구성됩니다.
  브라우저가 애플리케이션을 렌더링하기 전에 _Angular 컴파일러_를 통해 컴포넌트 및 템플릿을 실행 가능한 JavaScript로 변환해야 합니다.

  An Angular application consist largely of components and their HTML templates.
  Before the browser can render the application, 
  the components and templates must be converted to executable JavaScript by the _Angular compiler_.
.l-sub-section
  :marked
    <a href="https://www.youtube.com/watch?v=kW9cJsvcsGo" target="_blank">컴파일러 작성자인 Tobias Bosch가 AngularConnect 2016에서 Angular Compiler에 대해 설명한 영상</a>을 보세요
    
    <a href="https://www.youtube.com/watch?v=kW9cJsvcsGo" target="_blank">Watch compiler author Tobias Bosch explain the Angular Compiler</a> at AngularConnect 2016.
:marked
  런타임에 애플리케이션을 로드 할 때, **_적기_ 컴파일러**를 사용하여 브라우저에서 앱을 컴파일 할 수 있습니다.
  이것이 문서 전체에서 나타내고자 하는 표준 개발 방식입니다.
  이것은 대단합니다만 .. 단점이 있습니다.

  You can compile the app in the browser, at runtime, as the application loads, using the **_Just-in-Time_ (JIT) compiler**. 
  This is the standard development approach shown throughout the documentation.
  It's great .. but it has shortcomings.

  적기 컴파일은 런타임의 성능 저하를 초래합니다.
  뷰는 브라우저 내 컴파일 단계로 인해 렌더링 시간이 오래 걸립니다.
  응용 프로그램에는 Angular 컴파일러와 애플리케이션에서 실제로 필요하지 않은 많은 라이브러리 코드가 포함되어 있기 때문에 더 커집니다.
  커진 앱은 전송하는 데 시간이 오래 걸리며, 로드 속도 또한 느립니다.

  JIT compilation incurs a runtime performance penalty. 
  Views take longer to render because of the in-browser compilation step. 
  The application is bigger because it includes the Angular compiler 
  and a lot of library code that the application won't actually need.
  Bigger apps take longer to transmit and are slower to load.
  
  컴파일로 인해 많은 컴포넌트-템플릿 바인딩 오류가 발견 될 수 있습니다.
  적기 컴파일은 우리가 원하는 것보다 늦게, 런타임에서 그것들을 발견합니다.

  Compilation can uncover many component-template binding errors.
  JIT compilation discovers them at runtime which is later than we'd like.
  
  **_사전_** 컴파일러는 템플릿 오류를 일찍 잡아낼 수 있으며, 이 장에서 배우는 것처럼 빌드할 때의 컴파일을 통해 성능을 향상시킬 수 있습니다.

  The **_Ahead-of-Time_ (AOT) compiler** can catch template errors early and improve performance 
  by compiling at build time as you'll learn in this chapter.


a#aot-jit
.l-main-section
:marked
  ## _사전 컴파일러_ vs _적기 컴파일러_
  ## _Ahead-of-time_ (AOT) vs _Just-in-time_ (JIT)

  실제로는 Angular 컴파일러는 한 개 입니다. '사전 컴파일러'와 '적기 컴파일러'의 차이점은 타이밍과 툴링 문제입니다.
  사전 컴파일러를 사용하면 컴파일러는 한 세트의 라이브러리를 사용하여 빌드시 한 번 실행됩니다.
  적기 컴파일러를 사용하면 런타임마다 다른 라이브러리 세트를 사용하여 모든 사용자가 실행할 수 있습니다.

  There is actually only one Angular compiler. The difference between AOT and JIT is a matter of timing and tooling. 
  With AOT, the compiler runs once at build time using one set of libraries; 
  With JIT it runs every time for every user at runtime using a different set of libraries.  

  ### 왜 사전 컴파일을 할까요?
  ### Why do AOT compilation?

  *빠른 렌더링*
  *Faster rendering*

  사전 컴파일러는 브라우저가 미리 컴파일된 버전의 애플리케이션을 다운로드합니다.
  브라우저는 앱을 먼저 컴파일하지 않고 즉시 애플리케이션을 렌더링 할 수 있도록 실행 가능한 코드를 로드합니다.

  With AOT, the browser downloads a pre-compiled version of the application. 
  The browser loads executable code so it can render the application immediately, without waiting to compile the app first.

  *적은 비동기 요청*
  *Fewer asynchronous requests*

  컴파일러는 애플리케이션 JavaScript 내에서 외부 HTML 템플리트 및 CSS 스타일 시트를 _인라인_하여 해당 소스 파일에 대한 별도의 ajax 요청을 하지 않습니다.

  The compiler _inlines_ external html templates and css style sheets within the application JavaScript,
  eliminating separate ajax requests for those source files.

  *작은 Angular 프레임워크 다운로드 크기*
  *Smaller Angular framework download size*

  앱이 이미 컴파일 된 경우 Angular 컴파일러를 다운로드 할 필요가 없습니다.
  컴파일러는 Angular 자체의 절반 정도이므로, 컴파일러를 생략하면 애플리케이션의 페이로드가 크게 줄어 듭니다.

  There's no need to download the Angular compiler if the app is already compiled. 
  The compiler is roughly half of Angular itself, so omitting it dramatically reduces the application payload.

  *빠른 템플릿 오류 검출*
  *Detect template errors earlier*

  사전 컴파일러는 사용자가 빌드 단계를 볼 수 있기 전에 템플릿 바인딩 오류를 감지하고 보고합니다.

  The AOT compiler detects and reports template binding errors during the build step
  before users can see them.

  *더 나은 보안*
  *Better security*

  사전 컴파일러는 HTML 템플리트 및 컴포넌트를 클라이언트에 제공되기 훨씬 전에 JavaScript 파일로 컴파일합니다.
  읽어야 할 템플릿이 없고 위험한 클라이언트 측 HTML 또는 JavaScript 평가가 없으므로, 주입 공격에 대한 기회가 줄어 듭니다.

  AOT compiles HTML templates and components into JavaScript files long before they are served to the client.
  With no templates to read and no risky client-side HTML or JavaScript evaluation,
  there are fewer opportunities for injection attacks.

a#compile
.l-main-section
:marked
  ## 사전 컴파일
  ## Compile with AOT

  ### 오프라인 컴파일 준비
  ### Prepare for offline compilation

  <a href='../guide/setup.html'>설치</a>를 시작점으로 하세요.
  `app.component`에 대한 약간의 변경은 이 두 클래스와 html 파일로 이어집니다 :

  Take the <a href='../guide/setup.html'>Setup</a> as a starting point.
  A few minor changes to the lone `app.component` lead to these two class and html files:

+makeTabs(
  `cb-aot-compiler/ts/app/app.component.html,
   cb-aot-compiler/ts/app/app.component.ts`,
  null,
  `app/app.component.html,
   app/app.component.ts`
)(format='.')

:marked
  다음의 명령어로 몇 가지 새로운 npm 의존성을 설치하세요 :

  Install a few new npm dependencies with the following command: 

code-example(format='.').
  npm install @angular/compiler-cli @angular/platform-server --save

:marked
  TypeScript 컴파일러 (`tsc`) 대신 `@angular/compiler-cli` npm 패키지에 제공하는 `ngc` 컴파일러를 실행하세요.

  You will run the `ngc` compiler provided in the `@angular/compiler-cli` npm package
  instead of the TypeScript compiler (`tsc`). 

  `ngc`는 `tsc`의 대체형이며 거의 같은 방식으로 구성되어 있습니다.

  `ngc` is a drop-in replacement for `tsc` and is configured much the same way.  

  `ngc`는 사전-지향 설정의 자체 `tsconfig.json`을 필요로 합니다.
  원본 `tsconfig.json`을 `tsconfig-aot.json` 파일에 복사 한 다음, 다음과 같이 수정하세요.

  `ngc` requires its own `tsconfig.json` with AOT-oriented settings.
  Copy the original `tsconfig.json` to a file called `tsconfig-aot.json`, then modify it to look as follows.

+makeExample('cb-aot-compiler/ts/tsconfig-aot.json', null, 'tsconfig-aot.json')(format='.')

:marked
  `compilerOptions` 섹션은 하나의 속성을 제외하고는 변경되지 않았습니다.
  **`모듈`을 `es2015`로 설정하세요.**
  나중에 살펴볼 [Tree Shaking](# tree-shaking)섹션에서 설명하는 것 처럼 매우 중요합니다.

  The `compilerOptions` section is unchanged except for one property. 
  **Set the `module` to `es2015`**. 
  This is important as explained later in the [Tree Shaking](#tree-shaking) section.

  정말 새로운 것은 `angularCompilerOptions`라는 맨 아래의 `ngc` 섹션입니다.
  `"genDir" '"`속성은 컴파일 된 출력 파일을 새로운 `aot` 폴더에 저장하도록 컴파일러에게 알려줍니다.

  What's really new is the `ngc` section at the bottom called `angularCompilerOptions`. 
  Its `"genDir"` property tells the compiler 
  to store the compiled output files in a new `aot` folder.

  `"skipMetadataEmit" : true` 속성은 컴파일러가 컴파일 된 애플리케이션으로 메타데이터 파일을 생성하는 것을 막습니다.
  TypeScript 파일을 대상으로 할 때는 메타데이터 파일이 필요하지 않으므로 포함 할 필요가 없습니다.

  The `"skipMetadataEmit" : true` property prevents the compiler from generating metadata files with the compiled application. 
  Metadata files are not necessary when targeting TypeScript files, so there is no reason to include them.

:marked
  ***Component-relative Template URLS***

  The AOT compiler requires that `@Component` URLS for external templates and css files be _component-relative_.
  That means that the value of `@Component.templateUrl` is a URL value _relative_ to the component class file.
  For example, an `'app.component.html'` URL means that the template file is a sibling of its companion `app.component.ts` file.

  While JIT app URLs are more flexible, stick with _component-relative_ URLs for compatibility with AOT compilation.
  
  JIT-compiled applications that use the SystemJS loader and _component-relative_ URLs *must set the* `@Component.moduleId` *property to* `module.id`.
  The `module` object is undefined when an AOT-compiled app runs. 
  The app fails with a null reference error unless you assign a global `module` value in the `index.html` like this:
+makeExample('cb-aot-compiler/ts/index.html','moduleId')(format='.')  
.l-sub-section
  :marked
    Setting a global `module` is a temporary expedient. 

:marked
  ### Compiling the application

  Initiate AOT compilation from the command line using the previously installed `ngc` compiler by executing:
code-example(format='.').
  node_modules/.bin/ngc -p tsconfig-aot.json
.l-sub-section
  :marked
    Windows users should surround the `ngc` command in double quotes:
  code-example(format='.').
    "node_modules/.bin/ngc" -p tsconfig-aot.json
:marked
  `ngc` expects the `-p` switch to point to a `tsconfig.json` file or a folder containing a `tsconfig.json` file.

  After `ngc` completes, look for a collection of _NgFactory_ files in the `aot` folder (the folder specified as `genDir` in `tsconfig-aot.json`). 

  These factory files are essential to the compiled application. 
  Each component factory creates an instance of the component at runtime by combining the original class file
  and a JavaScript representation of the component's template.
  Note that the original component class is still referenced internally by the generated factory.
.l-sub-section
  :marked
    The curious can open the `aot/app.component.ngfactory.ts` to see the original Angular template syntax
    in its intermediate, compiled-to-TypeScript form.

    JIT compilation generates these same _NgFactories_ in memory where they are largely invisible.
    AOT compilation reveals them as separate, physical files.

:marked
.alert.is-important
  :marked
    Do not edit the _NgFactories_! Re-compilation replaces these files and all edits will be lost. 

a#bootstrap
.l-main-section
:marked
  ## Bootstrap

  The AOT path changes application bootstrapping.

  Instead of bootstrapping `AppModule`, you bootstrap the application with the generated module factory, `AppModuleNgFactory`.

  Switch from the `platformBrowserDynamic.bootstrap` used in JIT compilation to  
  `platformBrowser().bootstrapModuleFactory` and pass in the `AppModuleNgFactory`.    

  Here is AOT bootstrap in `main.ts` next to the familiar JIT version:

+makeTabs(
  `cb-aot-compiler/ts/app/main.ts,
   cb-aot-compiler/ts/app/main-jit.ts`,
  null,
  `app/main.ts (AOT),
   app/main.ts (JIT)`
)

:marked
  Be sure to recompile with `ngc`!

a#tree-shaking
:marked
  ## Tree Shaking

  AOT compilation sets the stage for further optimization through a process called _Tree Shaking_.
  A Tree Shaker walks the dependency graph, top to bottom, and _shakes out_ unused code like
  dead needles in a Christmas tree.

  Tree Shaking can greatly reduce the downloaded size of the application 
  by removing unused portions of both source and library code. 
  In fact, most of the reduction in small apps comes from removing unreferenced Angular features. 
  
  For example, this demo application doesn't use anything from the `@angular/forms` library.
  There is no reason to download Forms-related Angular code and tree shaking ensures that you don't.

  Tree Shaking and AOT compilation are separate steps. 
  Tree Shaking can only target JavaScript code. 
  AOT compilation converts more of the application to JavaScript, 
  which in turn makes more of the application "Tree Shakable".

  ### Rollup

  This cookbook illustrates a Tree Shaking utility called _Rollup_.

  Rollup statically analyzes the application by following the trail of `import` and `export` statements.
  It produces a final code _bundle_ that excludes code that is exported, but never imported.

  Rollup can only Tree Shake `ES2015` modules which have `import` and `export` statements.
.l-sub-section
  :marked
    Recall that `tsconfig-aot.json` is configured to produce `ES2015` modules. 
    It's not important that the code itself be written with `ES2015` syntax such as `class` and `const`. 
    What matters is that the code uses ES `import` and `export` statements rather than `require` statements.
:marked
  Install the Rollup dependencies with this command:
code-example(format='.').
  npm install rollup rollup-plugin-node-resolve rollup-plugin-commonjs rollup-plugin-uglify --save-dev
:marked
  Next, create a configuration file (`rollup-config.js`)
  in the project root directory to tell Rollup how to process the application. 
  The cookbook configuration file looks like this.

+makeExample('cb-aot-compiler/ts/rollup-config.js', null, 'rollup-config.js')(format='.')
:marked
  It tells Rollup that the app entry point is `app/main.js` .
  The `dest` attribute tells Rollup to create a bundle called `build.js` in the `dist` folder.
  Then there are plugins.

:marked
  ### Rollup Plugins

  Optional plugins filter and transform the Rollup inputs and output.

  *RxJS*
  Rollup expects application source code to use `ES2015` modules. 
  Not all external dependencies are published as `ES2015` modules.
  In fact, most are not. Many of them are published as _CommonJS_ modules.
  
  The _RxJs_ observable library is an essential Angular dependency published as an ES5 JavaScript _CommonJS_ module.

  Luckily there is a Rollup plugin that modifies _RxJs_ 
  to use the ES `import` and `export` statements that Rollup requires.
  Rollup then preserves in the final bundle the parts of `RxJS` referenced by the application.

+makeExample('cb-aot-compiler/ts/rollup-config.js','commonjs','rollup-config.js (CommonJs to ES2015 Plugin)')(format='.')     

:marked
  *Minification* 

  Rollup Tree Shaking reduces code size considerably.  Minification makes it smaller still.
  This cookbook relies on the _uglify_ Rollup plugin to minify and mangle the code.

+makeExample('cb-aot-compiler/ts/rollup-config.js','uglify','rollup-config.js (CommonJs to ES2015 Plugin)')(format='.') 

.l-sub-section
  :marked
    In a production setting, you would also enable gzip on the web server to compress
    the code into an even smaller package going over the wire.

:marked
  ### Run Rollup
  Execute the Rollup process with this command:
code-example(format='.').
  node_modules/.bin/rollup -c rollup-config.js

.l-sub-section
  :marked
    Rollup may log many lines with the following warning message:
  code-example(format='.', language='bash').
    The `this` keyword is equivalent to `undefined` at the top level of an ES module, and has been rewritten
  :marked
    You can safely ignore these warnings.

a#load
.l-main-section
:marked
  ## Load the Bundle

  Loading the generated application bundle does not require a module loader like SystemJS. 
  Remove the scripts that concern SystemJS.
  Instead, load the bundle file using a single `script` tag:

+makeExample('cb-aot-compiler/ts/index.html','bundle','index.html (load bundle)')(format='.') 

a#serve
.l-main-section
:marked
  ## Serve the app

  You'll need a web server to host the application.
  Use the same _Lite Server_ employed elsewhere in the documentation:
code-example(format='.').
  npm run lite
:marked
  The server starts, launches a browser, and the app should appear.

a#source-code
.l-main-section
:marked
  ## AOT QuickStart Source Code

  Here's the pertinent source code:
+makeTabs(
  `cb-aot-compiler/ts/app/app.component.html,
   cb-aot-compiler/ts/app/app.component.ts,
   cb-aot-compiler/ts/app/main.ts,
   cb-aot-compiler/ts/index.html,
   cb-aot-compiler/ts/tsconfig-aot.json,
   cb-aot-compiler/ts/rollup-config.js`,
  null,
  `app/app.component.html,
   app/app.component.ts,
   app/main.ts,
   index.html,
   tsconfig-aot.json,
   rollup-config.js`
)

a#toh
.l-main-section
:marked
  ## Tour of Heroes

  The sample above is a trivial variation of the QuickStart app. 
  In this section you apply what you've learned about AOT compilation and Tree Shaking 
  to an app with more substance, the tutorial [_Tour of Heroes_](../tutorial/toh-pt6.html).

  ### JIT in development, AOT in production

  Today AOT compilation and Tree Shaking take more time than is practical for development. That will change soon.
  For now, it's best to JIT compile in development and switch to AOT compilation before deploying to production.

  Fortunately, the source code can be compiled either way without change _if_ you account for a few key differences.

  ***index.html***

  The JIT and AOT apps require their own `index.html` files because they setup and launch so differently. 
  **Put the AOT version in the `/aot` folder** because two `index.html` files can't be in the same folder. 
  
  Here they are for comparison:

+makeTabs(
  `toh-6/ts/aot/index.html,
   toh-6/ts/index.html`,
  null,
  `aot/index.html (AOT),
   index.html (JIT)`
)

:marked
  The JIT version relies on `SystemJS` to load individual modules. 
  Its scripts appear in its `index.html`.

  The AOT version loads the entire application in a single script, `aot/dist/build.js`.
  It does not need `SystemJS`, so that script is absent from its `index.html`
  
  ***main.ts***
  
  JIT and AOT applications boot in much the same way but require different Angular libraries to do so.
  The key differences, covered in the [Bootstrap](#bootstrap) section above,
  are evident in these `main` files which can and should reside in the same folder: 

+makeTabs(
  `toh-6/ts/app/main-aot.ts,
   toh-6/ts/app/main.ts`,
  null,
  `app/main-aot.ts (AOT),
   app/main.ts (JIT)`
)

:marked
  ***TypeScript configuration***

  JIT-compiled applications transpile to `commonjs` modules.
  AOT-compiled applications transpile to _ES2015_/_ES6_ modules to facilitate Tree Shaking. 
  AOT requires its own TypeScript configuration settings as well.

  You'll need separate TypeScript configuration files such as these:

+makeTabs(
  `toh-6/ts/tsconfig-aot.json,
   toh-6/ts/tsconfig.json`,
  null,
  `tsconfig-aot.json (AOT),
   tsconfig.json (JIT)`
)

.callout.is-helpful
  header @Types and node modules
  :marked
    In the file structure of _this particular sample project_,
    the `node_modules` folder happens to be two levels up from the project root. 
    Therefore, `"typeRoots"` must be set to `"../../node_modules/@types/"`. 
    
    In a more typical project, `node_modules` would be a sibling of `tsconfig-aot.json`
    and `"typeRoots"` would be set to `"node_modules/@types/"`.
    Edit your `tsconfig-aot.json` to fit your project's file structure.

:marked
  ### Tree Shaking

  Rollup does the Tree Shaking as before.
  
+makeExample('toh-6/ts/rollup-config.js',null,'rollup-config.js')(format='.')  

:marked
  ### Running the application

.alert.is-important
  :marked
    The general audience instructions for running the AOT build of the Tour of Heroes app are not ready.

    The following instructions presuppose that you have cloned the 
    <a href="https://github.com/angular/angular.io" target="_blank">angular.io</a> 
    github repository and prepared it for development as explained in the repo's README.md.

    The _Tour of Heroes_ source code is in the `public/docs/_examples/toh-6/ts` folder.
:marked
  Run the JIT-compiled app with `npm start` as for all other JIT examples.

  Compiling with AOT presupposes certain supporting files, most of them discussed above.
+makeTabs(
  `toh-6/ts/aot/index.html,
   toh-6/ts/aot/bs-config.json,
   toh-6/ts/copy-dist-files.js,
   toh-6/ts/rollup-config.js,
   toh-6/ts/tsconfig-aot.json`,
  null,
  `aot/index.html,
   aot/bs-config.json,
   copy-dist-files.js,
   rollup-config.js,
   tsconfig-aot.json`)
:marked
  Extend the `scripts` section of the `package.json` with these npm scripts:
code-example(format='.').
  "build:aot": "ngc -p tsconfig-aot.json && rollup -c rollup-config.js",
  "lite:aot": "lite-server -c aot/bs-config.json",
:marked
  Copy the AOT distribution files into the `/aot` folder with the node script:
code-example(format='.').
  node copy-dist-files
.l-sub-section
  :marked
    You won't do that again until there are updates to `zone.js` or the `core-js` shim for old browsers.
:marked
  Now AOT-compile the app and launch it with the `lite` server:
code-example(format='.').
  npm run build:aot && npm run lite:aot

:marked
  ### Inspect the Bundle

  It's fascinating to see what the generated JavaScript bundle looks like after Rollup. 
  The code is minified, so you won't learn much from inspecting the bundle directly.
  But the <a href="https://github.com/danvk/source-map-explorer/blob/master/README.md" target="_blank">source-map-explorer</a> 
  tool can be quite revealing. 

  Install it:
code-example(format='.').  
  npm install source-map-explorer --save-dev
:marked
  Run the following command to generate the map.

code-example(format='.').
  node_modules/.bin/source-map-explorer aot/dist/build.js

:marked
  The `source-map-explorer` analyzes the source map generated with the bundle and draws a map of all dependencies,
  showing exactly which application and Angular modules and classes are included in the bundle.

  Here's the map for _Tour of Heroes_. 

a(href="/resources/images/cookbooks/aot-compiler/toh6-bundle.png", target="_blank", title="View larger image")
  figure.image-display
    img(src="/resources/images/cookbooks/aot-compiler/toh6-bundle.png" alt="TOH-6-bundle")   
