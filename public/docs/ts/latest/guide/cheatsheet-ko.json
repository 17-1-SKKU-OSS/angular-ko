{
  "currentEnvironment": "TypeScript",
  "version": {
    "raw": "2.4.1",
    "major": 2,
    "minor": 4,
    "patch": 2,
    "prerelease": [
      "local"
    ],
    "build": "sha.28d742f",
    "version": "2.4.2-local",
    "codeName": "snapshot",
    "isSnapshot": true,
    "full": "2.4.2-local+sha.28d742f",
    "branch": "master",
    "commitSHA": "28d742ffcea40373ecdda3c11a03918c0dce40dd"
  },
  "sections": [
    {
      "name": "Bootstrapping",
      "description": "<p><code>import { platformBrowserDynamic } from &#39;@angular/platform-browser-dynamic&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "platformBrowserDynamic().bootstrapModule(AppModule);",
          "bold": [
            "platformBrowserDynamic().bootstrapModule"
          ],
          "description": "<p><code>NgModule</code>에서 정의한 최상위 컴포넌트로 앱을 실행(bootstrap)</p>\n"
        }
      ],
      "index": 0
    },
    {
      "name": "NgModules",
      "description": "<p><code>import { NgModule } from &#39;@angular/core&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "@NgModule({ declarations: ..., imports: ...,\n     exports: ..., providers: ..., bootstrap: ...})\nclass MyModule {}",
          "bold": [
            "NgModule"
          ],
          "description": "<p>컴포넌트, 지시자, 파이프, 제공자를 포함한 모듈 정의</p>\n"
        },
        {
          "syntax": "declarations: [MyRedComponent, MyBlueComponent, MyDatePipe]",
          "bold": [
            "declarations:"
          ],
          "description": "<p>이 모듈에 속한 컴포넌트, 지시자, 파이프의 목록</p>\n"
        },
        {
          "syntax": "imports: [BrowserModule, SomeOtherModule]",
          "bold": [
            "imports:"
          ],
          "description": "<p>이 모듈에 임포트할 모듈의 목록. 임포트한 모듈의 모든 것은 이 모듈의 <code>declarations</code>에서 사용 가능.</p>\n"
        },
        {
          "syntax": "exports: [MyRedComponent, MyDatePipe]",
          "bold": [
            "exports:"
          ],
          "description": "<p>이 모듈을 임포트하는 모듈에 보여줄 컴포넌트, 지시자, 파이프의 목록.</p>\n"
        },
        {
          "syntax": "providers: [MyService, { provide: ... }]",
          "bold": [
            "providers:"
          ],
          "description": "<p>이 모듈의 내용과 이 모듈을 임포트하는 것에 보여줄 의존성 주입 제공자의 목록.</p>\n"
        },
        {
          "syntax": "bootstrap: [MyAppComponent]",
          "bold": [
            "bootstrap:"
          ],
          "description": "<p>이 모듈이 실행(bootstrap)될 때 실행할 컴포넌트의 목록.</p>\n"
        }
      ],
      "index": 1
    },
    {
      "name": "Template syntax",
      "description": "",
      "items": [
        {
          "syntax": "<input [value]=\"firstName\">",
          "bold": [
            "[value]"
          ],
          "description": "<p><code>value</code> 프로퍼티를 <code>firstName</code> 표현식 결과에 바인딩.</p>\n"
        },
        {
          "syntax": "<div [attr.role]=\"myAriaRole\">",
          "bold": [
            "[attr.role]"
          ],
          "description": "<p><code>role</code> 속성을 <code>myAriaRole</code> 표현식 결과에 바인딩.</p>\n"
        },
        {
          "syntax": "<div [class.extra-sparkle]=\"isDelightful\">",
          "bold": [
            "[class.extra-sparkle]"
          ],
          "description": "<p>엘리먼트의 <code>extra-sparkle</code> CSS 클래스 존재여부를 <code>isDelightful</code> 표현식의 참 여부에 바인딩.</p>\n"
        },
        {
          "syntax": "<div [style.width.px]=\"mySize\">",
          "bold": [
            "[style.width.px]"
          ],
          "description": "<p><code>width</code> 스타일 프로퍼티를 <code>mySize</code> 표현식의 결과에 픽셀 단위로 바인딩. 단위는 옵션.</p>\n"
        },
        {
          "syntax": "<button (click)=\"readRainbow($event)\">",
          "bold": [
            "(click)"
          ],
          "description": "<p>버튼 엘리먼트(또는 버튼의 자식)에 클릭 이벤트가 발생 시 <code>readRainbow</code> 메소드 호출하고 event 객체에 전달.</p>\n"
        },
        {
          "syntax": "<div title=\"Hello {{ponyName}}\">",
          "bold": [
            "{{ponyName}}"
          ],
          "description": "<p>프로퍼티를 삽입된(interpolated) 문자열에 바인딩, 예를 들어, &quot;Hello Seabiscuit&quot;. 는 다음과 동일:\n<code>&lt;div [title]=&quot;&#39;Hello &#39; + ponyName&quot;&gt;</code></p>\n"
        },
        {
          "syntax": "<p>Hello {{ponyName}}</p>",
          "bold": [
            "{{ponyName}}"
          ],
          "description": "<p>텍스트 내용을 삽입된(interpolated) 문자열에 바인딩, 예를 들어, &quot;Hello Seabiscuit&quot;.</p>\n"
        },
        {
          "syntax": "<my-cmp [(title)]=\"name\">",
          "bold": [
            "[(title)]"
          ],
          "description": "<p>양방향 바인딩 설정. 다음과 동일: <code>&lt;my-cmp [title]=&quot;name&quot; (titleChange)=&quot;name=$event&quot;&gt;</code></p>\n"
        },
        {
          "syntax": "<video #movieplayer ...>\n  <button (click)=\"movieplayer.play()\">\n</video>",
          "bold": [
            "#movieplayer",
            "(click)"
          ],
          "description": "<p>데이터 바인딩 시 <code>video</code> 엘리먼트 인스턴스에 접근할 수 있는 <code>movieplayer</code> 로컬 변수 생성과 현재 템플릿의 이벤트 바인딩 표현식.</p>\n"
        },
        {
          "syntax": "<p *myUnless=\"myExpression\">...</p>",
          "bold": [
            "*myUnless"
          ],
          "description": "<p>현재 엘리먼트를 임베드 템플릿으로 변환하는 <code>*</code> 기호. 다음과 동일:\n<code>&lt;template [myUnless]=&quot;myExpression&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/template&gt;</code></p>\n"
        },
        {
          "syntax": "<p>Card No.: {{cardNumber | myCardNumberFormatter}}</p>",
          "bold": [
            "{{cardNumber | myCardNumberFormatter}}"
          ],
          "description": "<p><code>cardNumber</code> 표현식의 현재 값을 <code>myCardNumberFormatter</code> 파이프로 변환.</p>\n"
        },
        {
          "syntax": "<p>Employer: {{employer?.companyName}}</p>",
          "bold": [
            "{{employer?.companyName}}"
          ],
          "description": "<p>안전 내비게이션 연산자 (<code>?</code>): <code>employer</code>는 선택적이며 만약 <code>undefined</code>인 경우 표현식의 나머지 부분은 무시됨.</p>\n"
        },
        {
          "syntax": "<svg:rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/>",
          "bold": [
            "svg:"
          ],
          "description": "<p>SVG 관련 템플릿은 HTML 컴포넌트와 SVG 엘리먼트와 구별을 위해 최상위 엘리먼트에 <code>svg:</code> 접두어 필요.</p>\n"
        },
        {
          "syntax": "<svg>\n  <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/>\n</svg>",
          "bold": [
            "svg"
          ],
          "description": "<p><code>&lt;svg&gt;</code> 최상위 엘리먼트는 접두어 없이 자동으로 SVG 엘리먼트로 인식됨.</p>\n"
        }
      ],
      "index": 2
    },
    {
      "name": "Built-in directives",
      "description": "<p><code>import { CommonModule } from &#39;@angular/common&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "<section *ngIf=\"showSection\">",
          "bold": [
            "*ngIf"
          ],
          "description": "<p><code>showSection</code> 표현식에 기반하여 DOM 트리의 특정 부분을 제거하거나 재생성.</p>\n"
        },
        {
          "syntax": "<li *ngFor=\"let item of list\">",
          "bold": [
            "*ngFor"
          ],
          "description": "<p>li 엘리먼트와 컨텐츠를 템플릿으로 변환하고 리스트의 각 아이템을 뷰에 인스턴스화 하기 위해 사용.</p>\n"
        },
        {
          "syntax": "<div [ngSwitch]=\"conditionExpression\">\n  <template [ngSwitchCase]=\"case1Exp\">...</template>\n  <template ngSwitchCase=\"case2LiteralString\">...</template>\n  <template ngSwitchDefault>...</template>\n</div>",
          "bold": [
            "[ngSwitch]",
            "[ngSwitchCase]",
            "ngSwitchCase",
            "ngSwitchDefault"
          ],
          "description": "<p><code>conditionExpression</code>의 현재 값에 기반하여 임베드 템플릿의 하나를 선택함으로써 div의 컨텐츠를 조건부로 교환.</p>\n"
        },
        {
          "syntax": "<div [ngClass]=\"{active: isActive, disabled: isDisabled}\">",
          "bold": [
            "[ngClass]"
          ],
          "description": "<p>엘리먼트의 CSS 클래스 존재여부를 연관된 맵 값의 참 여부에 바인딩. 오른쪽 표현식은 반드시 {class-name: true/false} 맵을 반환해야 함.</p>\n"
        }
      ],
      "index": 3
    },
    {
      "name": "Forms",
      "description": "<p><code>import { FormsModule } from &#39;@angular/forms&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "<input [(ngModel)]=\"userName\">",
          "bold": [
            "[(ngModel)]"
          ],
          "description": "<p>양방향 데이터 바인딩, 파싱, 폼 컨트롤 유효성 검사 제공.</p>\n"
        }
      ],
      "index": 4
    },
    {
      "name": "Class decorators",
      "description": "<p><code>import { Directive, ... } from &#39;@angular/core&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "@Component({...})\nclass MyComponent() {}",
          "bold": [
            "@Component({...})"
          ],
          "description": "<p>클래스가 컴포넌트임을 선언하고 그 컴포넌트의 메타데이터를 제공</p>\n"
        },
        {
          "syntax": "@Directive({...})\nclass MyDirective() {}",
          "bold": [
            "@Directive({...})"
          ],
          "description": "<p>클래스가 지시자임을 선언하고 그 지시자의 메타데이터를 제공.</p>\n"
        },
        {
          "syntax": "@Pipe({...})\nclass MyPipe() {}",
          "bold": [
            "@Pipe({...})"
          ],
          "description": "<p>클래스가 파이프임을 선언하고 그 파이프의 메타데이터를 제공.</p>\n"
        },
        {
          "syntax": "@Injectable()\nclass MyService() {}",
          "bold": [
            "@Injectable()"
          ],
          "description": "<p>의존성이 있는 클래스라는 것을 선언. 의존성 주입기가 클래스 인스턴스를 만들 때 의존성이 생성자에 주입되어야만 함.\n\n</p>\n"
        }
      ],
      "index": 5
    },
    {
      "name": "Directive configuration",
      "description": "<p><code>@Directive({ property1: value1, ... })</code>\n</p>\n",
      "items": [
        {
          "syntax": "selector: '.cool-button:not(a)'",
          "bold": [
            "selector:"
          ],
          "description": "<p>템플릿에서 이 지시자를 식별할 수 있는 CSS 선택자를 지정. 지원하는 선택자는 <code>엘리먼트</code>,\n<code>[속성]</code>, <code>.클래스</code>, 그리고 <code>:not()</code>.</p>\n<p>부모-자식 관계 선택자는 지원하지 않음.</p>\n"
        },
        {
          "syntax": "providers: [MyService, { provide: ... }]",
          "bold": [
            "providers:"
          ],
          "description": "<p>이 지시자와 그 자식의 의존성 주입 제공자 목록.</p>\n"
        }
      ],
      "index": 6
    },
    {
      "name": "Component configuration",
      "description": "<p>\n<code>@Component</code> extends <code>@Directive</code>,\nso the <code>@Directive</code> configuration applies to components as well</p>\n",
      "items": [
        {
          "syntax": "moduleId: module.id",
          "bold": [
            "moduleId:"
          ],
          "description": "<p>만약 설정을 하면, <code>templateUrl</code> 과 <code>styleUrl</code> 은 컴포넌트에 상대적으로 검색.</p>\n"
        },
        {
          "syntax": "viewProviders: [MyService, { provide: ... }]",
          "bold": [
            "viewProviders:"
          ],
          "description": "<p>이 컴포넌트의 뷰 영역(scope)에서의 의존성 주입 제공자 목록.</p>\n"
        },
        {
          "syntax": "template: 'Hello {{name}}'\ntemplateUrl: 'my-component.html'",
          "bold": [
            "template:",
            "templateUrl:"
          ],
          "description": "<p>컴포넌트 뷰의 인라인 템플릿 또는 외부 템플릿 URL.</p>\n"
        },
        {
          "syntax": "styles: ['.primary {color: red}']\nstyleUrls: ['my-component.css']",
          "bold": [
            "styles:",
            "styleUrls:"
          ],
          "description": "<p>컴포넌트 뷰 스타일링을 위한 인라인 CSS 또는 스타일시트 URL 목록.</p>\n"
        }
      ],
      "index": 7
    },
    {
      "name": "Class field decorators for directives and components",
      "description": "<p><code>import { Input, ... } from &#39;@angular/core&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "@Input() myProperty;",
          "bold": [
            "@Input()"
          ],
          "description": "<p>프로퍼티 바인딩으로 업데이트 할 수 있는 input 프로퍼티 선언 (예:\n<code>&lt;my-cmp [myProperty]=&quot;someExpression&quot;&gt;</code>).</p>\n"
        },
        {
          "syntax": "@Output() myEvent = new EventEmitter();",
          "bold": [
            "@Output()"
          ],
          "description": "<p>이벤트 바인딩으로 구독할 수 있는 이벤트를 방출하는 output 프로퍼티 선언 (예: <code>&lt;my-cmp (myEvent)=&quot;doSomething()&quot;&gt;</code>).</p>\n"
        },
        {
          "syntax": "@HostBinding('class.valid') isValid;",
          "bold": [
            "@HostBinding('class.valid')"
          ],
          "description": "<p>호스트 엘리먼트 프로퍼티 (여기서는 CSS 클래스 <code>valid</code>)를 지시자/컴포넌트 프로퍼티에 바인딩 (<code>isValid</code>).</p>\n"
        },
        {
          "syntax": "@HostListener('click', ['$event']) onClick(e) {...}",
          "bold": [
            "@HostListener('click', ['$event'])"
          ],
          "description": "<p>호스트 엘리먼트 이벤트 (<code>click</code>)를 지시자/컴포넌트 메소드 (<code>onClick</code>)에 바인딩, 선택적으로 (<code>$event</code>) 파라미터 전달.</p>\n"
        },
        {
          "syntax": "@ContentChild(myPredicate) myChildComponent;",
          "bold": [
            "@ContentChild(myPredicate)"
          ],
          "description": "<p>컴포넌트 컨텐츠 쿼리의 첫번째 결과를 (<code>myPredicate</code>) 클래스의 프로퍼티 (<code>myChildComponent</code>) 에 바인딩 .</p>\n"
        },
        {
          "syntax": "@ContentChildren(myPredicate) myChildComponents;",
          "bold": [
            "@ContentChildren(myPredicate)"
          ],
          "description": "<p>컴포넌트 컨튼츠 쿼리의 결과를 (<code>myPredicate</code>) 클래스의 프로퍼티 (<code>myChildComponents</code>) 에 바인딩. </p>\n"
        },
        {
          "syntax": "@ViewChild(myPredicate) myChildComponent;",
          "bold": [
            "@ViewChild(myPredicate)"
          ],
          "description": "<p>컴포넌트 뷰 쿼리의 첫번째 결과를 (<code>myPredicate</code>) 클래스의 프로퍼티 (<code>myChildComponent</code>) 에 바인딩. 지시자에는 사용불가.</p>\n"
        },
        {
          "syntax": "@ViewChildren(myPredicate) myChildComponents;",
          "bold": [
            "@ViewChildren(myPredicate)"
          ],
          "description": "<p>컴포넌트 뷰 쿼리의 결과를 (<code>myPredicate</code>) 클래스의 프로퍼티 (<code>myChildComponents</code>) 에 바인딩. 지시자에는 사용불가.</p>\n"
        }
      ],
      "index": 8
    },
    {
      "name": "Directive and component change detection and lifecycle hooks",
      "description": "<p>(implemented as class methods)\n</p>\n",
      "items": [
        {
          "syntax": "constructor(myService: MyService, ...) { ... }",
          "bold": [
            "constructor(myService: MyService, ...)"
          ],
          "description": "<p>다른 어떤 라이프사이클 훅 전에 호출됨. 의존성을 주입하기 위해 사용하세요. 그러나 무거운 작업은 금물.</p>\n"
        },
        {
          "syntax": "ngOnChanges(changeRecord) { ... }",
          "bold": [
            "ngOnChanges(changeRecord)"
          ],
          "description": "<p>input 프로퍼티의 모든 변경 후 또는 컨텐츠나 자식 뷰 처리 전에 호출됨.</p>\n"
        },
        {
          "syntax": "ngOnInit() { ... }",
          "bold": [
            "ngOnInit()"
          ],
          "description": "<p>생성자 다음 호출. input 프로퍼티를 초기화한 다음 <code>ngOnChanges</code>를 첫번째로 호출.</p>\n"
        },
        {
          "syntax": "ngDoCheck() { ... }",
          "bold": [
            "ngDoCheck()"
          ],
          "description": "<p>컴포넌트나 지시자의 input 프로퍼티가 체크될 때마다 호출. 사용자 정의 체크를 수행하여 변경 감지를 확장하기 위해 사용.</p>\n"
        },
        {
          "syntax": "ngAfterContentInit() { ... }",
          "bold": [
            "ngAfterContentInit()"
          ],
          "description": "<p>컴포넌트나 지시자의 컨텐츠가 초기화 되면 <code>ngOnInit</code> 다음 호출.</p>\n"
        },
        {
          "syntax": "ngAfterContentChecked() { ... }",
          "bold": [
            "ngAfterContentChecked()"
          ],
          "description": "<p>컴포넌트나 지시자의 모든 체크 후에 호출</p>\n"
        },
        {
          "syntax": "ngAfterViewInit() { ... }",
          "bold": [
            "ngAfterViewInit()"
          ],
          "description": "<p>컴포넌트의 뷰가 초기화 되면 <code>ngAfterContentInit</code> 다음 호출. 컴포넌트에만 적용.</p>\n"
        },
        {
          "syntax": "ngAfterViewChecked() { ... }",
          "bold": [
            "ngAfterViewChecked()"
          ],
          "description": "<p>컴포넌트 뷰의 모든 체크 후에 호출. 컴포넌트에만 적용.</p>\n"
        },
        {
          "syntax": "ngOnDestroy() { ... }",
          "bold": [
            "ngOnDestroy()"
          ],
          "description": "<p>인스턴스가 소멸되기 전에 한번 호출.</p>\n"
        }
      ],
      "index": 9
    },
    {
      "name": "Dependency injection configuration",
      "description": "",
      "items": [
        {
          "syntax": "{ provide: MyService, useClass: MyMockService }",
          "bold": [
            "provide",
            "useClass"
          ],
          "description": "<p><code>MyService</code> 제공자를 <code>MyMockService</code> 클래스로 설정하거나 오버라이드.</p>\n"
        },
        {
          "syntax": "{ provide: MyService, useFactory: myFactory }",
          "bold": [
            "provide",
            "useFactory"
          ],
          "description": "<p><code>MyService</code> 제공자를 <code>myFactory</code> 팩토리 함수로 설정하거나 오버라이드.</p>\n"
        },
        {
          "syntax": "{ provide: MyValue, useValue: 41 }",
          "bold": [
            "provide",
            "useValue"
          ],
          "description": "<p><code>MyValue</code> 제공자를 <code>41</code> 값으로 설정하거나 오버라이드.</p>\n"
        }
      ],
      "index": 10
    },
    {
      "name": "Routing and navigation",
      "description": "<p><code>import { Routes, RouterModule, ... } from &#39;@angular/router&#39;;</code>\n</p>\n",
      "items": [
        {
          "syntax": "const routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'path/:routeParam', component: MyComponent },\n  { path: 'staticPath', component: ... },\n  { path: '**', component: ... },\n  { path: 'oldPath', redirectTo: '/staticPath' },\n  { path: ..., component: ..., data: { message: 'Custom' } }\n]);\n\nconst routing = RouterModule.forRoot(routes);",
          "bold": [
            "Routes"
          ],
          "description": "<p>애플리케이션 route 설정. static, parameterized, redirect, 와 wildcard route 지원. 사용자 정의 route 데이터와 </p>\n"
        },
        {
          "syntax": "\n<router-outlet></router-outlet>\n<router-outlet name=\"aux\"></router-outlet>\n",
          "bold": [
            "router-outlet"
          ],
          "description": "<p>Marks the location to load the component of the active route.</p>\n"
        },
        {
          "syntax": "\n<a routerLink=\"/path\">\n<a [routerLink]=\"[ '/path', routeParam ]\">\n<a [routerLink]=\"[ '/path', { matrixParam: 'value' } ]\">\n<a [routerLink]=\"[ '/path' ]\" [queryParams]=\"{ page: 1 }\">\n<a [routerLink]=\"[ '/path' ]\" fragment=\"anchor\">\n",
          "bold": [
            "[routerLink]"
          ],
          "description": "<p>Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the <code>/</code> prefix; for a child route, use the <code>./</code>prefix; for a sibling or parent, use the <code>../</code> prefix.</p>\n"
        },
        {
          "syntax": "<a [routerLink]=\"[ '/path' ]\" routerLinkActive=\"active\">",
          "bold": [],
          "description": "<p>The provided classes are added to the element when the <code>routerLink</code> becomes the current active route.</p>\n"
        },
        {
          "syntax": "class CanActivateGuard implements CanActivate {\n    canActivate(\n      route: ActivatedRouteSnapshot,\n      state: RouterStateSnapshot\n    ): Observable<boolean>|Promise<boolean>|boolean { ... }\n}\n\n{ path: ..., canActivate: [CanActivateGuard] }",
          "bold": [
            "CanActivate"
          ],
          "description": "<p>An interface for defining a class that the router should call first to determine if it should activate this component. Should return a boolean or an Observable/Promise that resolves to a boolean.</p>\n"
        },
        {
          "syntax": "class CanDeactivateGuard implements CanDeactivate<T> {\n    canDeactivate(\n      component: T,\n      route: ActivatedRouteSnapshot,\n      state: RouterStateSnapshot\n    ): Observable<boolean>|Promise<boolean>|boolean { ... }\n}\n\n{ path: ..., canDeactivate: [CanDeactivateGuard] }",
          "bold": [
            "CanDeactivate"
          ],
          "description": "<p>An interface for defining a class that the router should call first to determine if it should deactivate this component after a navigation. Should return a boolean or an Observable/Promise that resolves to a boolean.</p>\n"
        },
        {
          "syntax": "class CanActivateChildGuard implements CanActivateChild {\n    canActivateChild(\n      route: ActivatedRouteSnapshot,\n      state: RouterStateSnapshot\n    ): Observable<boolean>|Promise<boolean>|boolean { ... }\n}\n\n{ path: ..., canActivateChild: [CanActivateGuard],\n    children: ... }",
          "bold": [
            "CanActivateChild"
          ],
          "description": "<p>An interface for defining a class that the router should call first to determine if it should activate the child route. Should return a boolean or an Observable/Promise that resolves to a boolean.</p>\n"
        },
        {
          "syntax": "class ResolveGuard implements Resolve<T> {\n    resolve(\n      route: ActivatedRouteSnapshot,\n      state: RouterStateSnapshot\n    ): Observable<any>|Promise<any>|any { ... }\n}\n\n{ path: ..., resolve: [ResolveGuard] }",
          "bold": [
            "Resolve"
          ],
          "description": "<p>An interface for defining a class that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</p>\n"
        },
        {
          "syntax": "class CanLoadGuard implements CanLoad {\n    canLoad(\n      route: Route\n    ): Observable<boolean>|Promise<boolean>|boolean { ... }\n}\n\n{ path: ..., canLoad: [CanLoadGuard], loadChildren: ... }",
          "bold": [
            "CanLoad"
          ],
          "description": "<p>An interface for defining a class that the router should call first to check if the lazy loaded module should be loaded. Should return a boolean or an Observable/Promise that resolves to a boolean.</p>\n"
        }
      ],
      "index": 11
    }
  ]
}
