block includes
  include ../_util-fns

:marked
  **속성** 지시자는 DOM 엘리먼트의 모양이나 동작을 변경합니다.

  An **Attribute** directive changes the appearance or behavior of a DOM element.


:marked
  # 내용
  # Contents


  * [지시자 개요](#directive-overview)

  * [Directives overview](#directive-overview)

  * [간단한 속성 지시자 작성](#write-directive)

  * [Build a simple attribute directive](#write-directive)

  * [템플릿 엘리먼트에 속성 지시자 적용](#apply-directive)
  
  * [Apply the attribute directive to an element in a template](#apply-directive)

  * [사용자 시작 이벤트에 응답](#respond-to-user)

  * [Respond to user-initiated events](#respond-to-user)

  * [_@Input_ 데이터 바인딩으로 지시자에 값 전달](#bindings)

  * [Pass values into the directive with an _@Input_ data binding](#bindings)

  * [두 번째 프로퍼티에 바인딩](#second-property)

  * [Bind to a second property](#second-property)

  <live-example title="Attribute Directive example"></live-example>에서 시도해 보세요.

  Try the <live-example title="Attribute Directive example"></live-example>.

.l-main-section
a#directive-overview
:marked
  ## 지시자 개요
  ## Directives overview

  Angular에는 다음 세 가지 지시자가 있습니다.
  
  There are three kinds of directives in Angular:
  
  1. 컴포넌트 &mdash; 템플릿을 사용한 지시자.

  1. Components &mdash; directives with a template.

  1. 구조 지시자 &mdash; DOM 엘리먼트를 추가하고 제거하여 DOM 레이아웃을 변경.

  1. Structural directives &mdash; change the DOM layout by adding and removing DOM elements.

  1. 속성 지시자 &mdash; 엘리먼트, 컴포넌트 또는 다른 지시자의 모양이나 동작을 변경.

  1. Attribute directives &mdash; change the appearance or behavior of an element, component, or another directive.

  *컴포넌트*는 세 가지 지시자 중 가장 일반적인 것입니다.
  [빠른시작](../quickstart.html) 예제에서 컴포넌트를 처음 보았을 것입니다.

  *Components* are the most common of the three directives.
  You saw a component for the first time in the [QuickStart](../quickstart.html) example.

  *구조 지시자*는 뷰의 구조를 변경합니다.
  두 가지 예는 [NgFor](template-syntax.html#ngFor)와 [NgIf](template-syntax.html#ngIf)입니다.
  [구조 지시자](structural-directives.html) 가이드에서 이들에 대해 자세히 알아보세요.

  *Structural Directives* change the structure of the view. 
  Two examples are [NgFor](template-syntax.html#ngFor) and [NgIf](template-syntax.html#ngIf).
  Learn about them in the [Structural Directives](structural-directives.html) guide.

  *속성 지시자*는 엘리먼트의 속성으로 사용됩니다.
  예를 들어, [템플릿 구문](template-syntax.html) 가이드의 내장 [NgStyle](template-syntax.html#ngStyle) 지시자는 
  동시에 여러 엘리먼트 스타일을 변경할 수 있습니다.

  *Attribute directives* are used as attributes of elements. 
  The built-in [NgStyle](template-syntax.html#ngStyle) directive in the [Template Syntax](template-syntax.html) guide, for example,
  can change several element styles at the same time.

.l-main-section
a#write-directive
:marked
  ## 간단한 속성 지시자 만들기
  ## Build a simple attribute directive
  속성 지시자를 만들려면 최소한 속성을 식별하는 지시자를 정의하고 `@Directive`로 어노테이션된
  컨트롤러 클래스를 만들어야 합니다.
  컨트롤러 클래스에서는 원하는 지시자 동작을 구현합니다.

  An attribute directive minimally requires building a controller class annotated with
  `@Directive`, which specifies the selector that identifies
  the attribute.
  The controller class implements the desired directive behavior.

  이 페이지에서는 사용자가 해당 엘리먼트를 가리키면 엘리먼트의 
  배경색을 설정하는 간단한 속성 지시자를 작성하는 방법을 보여줍니다.

  This page demonstrates building a simple attribute
  directive to set an element's background color
  when the user hovers over that element.
.l-sub-section
  :marked
    기술적으로 지시자가 단순히 배경색을 설정하기 위해 필요한 것은 아닙니다. 스타일 바인딩은 다음과 같이 스타일을 설정할 수 있습니다.

    Technically, a directive isn't necessary to simply set the background color. Style binding can set styles as follows:

  +makeExample('attribute-directives/ts/src/app/app.component.1.html','p-style-background')

  :marked
    [템플릿 구문](template-syntax.html) 페이지에서 [스타일 바인딩](template-syntax.html#style-binding)에 대해 자세히 알아보세요.

    Read more about [style binding](template-syntax.html#style-binding) on the [Template Syntax](template-syntax.html) page.

    간단한 예제지만 속성 지시자가 작동하는 방법을 설명해줄 것입니다.

    For a simple example, though, this will demonstrate how attribute directives work.



:marked
  ### 지시자 코드 작성
  ### Write the directive code
  <span ngio-ex>attribute-directives</span>라는 새 프로젝트를 만들려면
  [setup](setup.html) 지침을 따르세요.

  Follow the [setup](setup.html) instructions for creating a new project
  named <span ngio-ex>attribute-directives</span>.

:marked
  다음 코드를 사용하여 지정된 폴더에 다음 소스 파일을 만듭니다:

  Create the following source file in the indicated folder with the following code:
+makeExample('src/app/highlight.directive.1.ts')

block highlight-directive-1
  :marked
    `import` 문에서 Angular `core`의 기호를 지정합니다:

    The `import` statement specifies symbols from the Angular `core`:

    1. `지시자`는 `@Directive` 데코레이터의 기능을 제공합니다.

    1. `Directive` provides the functionality of the `@Directive` decorator.

    1. 코드가 DOM 엘리먼트에 액세스 할 수 있도록 지시자의 생성자에
    `ElementRef`를 [주입](dependency-injection.html)합니다.

    1. `ElementRef` [injects](dependency-injection.html) into the directive's constructor
    so the code can access the DOM element.

    1. `Input`은 데이터가 바인딩 표현식에서 지시자로 흐르게합니다.

    1. `Input` allows data to flow from the binding expression into the directive.

    다음으로, `@Directive` 데코레이터 함수는 설정 객체에 지시자 메타데이터를 인자로 포함합니다.

    Next, the `@Directive` decorator function contains the directive metadata in a configuration object
    as an argument.

:marked
  `@Directive`는 지시자와 연관된 템플릿의 HTML을 식별하기 위해 CSS 선택자를 필요로 합니다.
  [속성의 CSS 선택자](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)는 속성 
  이름을 대괄호로 묶은 것입니다.
  여기서 지시자의 선택자는 `[myHighlight]`입니다.
  Angular는 `myHighlight`라는 속성이 있는 템플릿의 모든 엘리먼트를 찾습니다.

  `@Directive` requires a CSS selector to identify
  the HTML in the template that is associated with the directive.
  The [CSS selector for an attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)
  is the attribute name in square brackets.
  Here, the directive's selector is `[myHighlight]`.
  Angular will locate all elements in the template that have an attribute named `myHighlight`.
.l-sub-section
  :marked
    ### "highlight"라고 하지 않는 이유?
    ### Why not call it "highlight"?
    *highlight*는 *myHighlight* 보다 간결한 이름이고 그렇게 해도 작동하지만,
    표준 HTML 속성과 충돌하지 않도록 선택자 이름에 접두어를 붙이는 것이 가장 좋습니다.
    또한 타사 지시자 이름과 충돌하는 위험을 줄입니다.

    Though *highlight* is a more concise name than *myHighlight* and would work,
    a best practice is to prefix selector names to ensure
    they don't conflict with  standard HTML attributes.
    This also reduces the risk colliding with third-party directive names.

    `highlight` 지시자 이름에 **`ng`** 접두어를 붙이지 않았는지 꼭 확인하세요.
    왜냐하면 이 접두어는 Angular를 위해 예약되었고 진단하기 어려운 버그를 유발할 수 있기 때문입니다.
    간단한 데모의 경우, 짧은 접두어 `my`가 사용자 지시자를 구별하는 데 도움이됩니다.

    Make sure you do **not** prefix the `highlight` directive name with **`ng`** because
    that prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose. For a simple demo, the short prefix, `my`, helps distinguish your custom directive.

p
  | #[code @Directive] 메타데이터가 지시자의 컨트롤러 클래스에 오면, 해당 지시자의 로직을 가진 #[code HighlightDirective]를 호출합니다.
p
  | After the #[code @Directive] metadata comes the directive's controller class, called #[code HighlightDirective], which contains the logic for the directive.
  +ifDocsFor('ts')
    p
      |  #[code HighlightDirective]를 익스포팅하면 다른 컴포넌트에서 접근할 수 있습니다.
    p
      |  Exporting #[code HighlightDirective] makes it accessible to other components.
:marked
  Angular는 각각의 일치하는 엘리먼트에 대한 
  지시자 컨트롤러 클래스의 새로운 인스턴스를 생성하고, 
  생성자에 Angular `ElementRef`를 주입합니다.
  `ElementRef`는 `nativeElement` 프로퍼티를 통해 
  DOM 엘리먼트에 직접 접근하는 서비스입니다.

  Angular creates a new instance of the directive's controller class for
  each matching element, injecting an Angular `ElementRef`
  into the constructor.
  `ElementRef` is a service that grants direct access to the DOM element
  through its `nativeElement` property.

.l-main-section
a#apply-directive
:marked
  ## 속성 지시자 적용
  ## Apply the attribute directive
  새로운 `HighlightDirective`를 사용하려면, 
  지시자를 속성으로 단락 (`<p>`) 엘리먼트에 적용하는 템플릿을 생성하세요.  
  Angular 용어로, `<p>` 엘리먼트는 속성의 **host**가 될 것입니다.

  To use the new `HighlightDirective`, create a template that
  applies the directive as an attribute to a paragraph (`<p>`) element.
  In Angular terms, the `<p>` element will be the attribute **host**.
p
  | 자체 코드 #[+adjExPath('app.component.html')]에 템플릿을 작성합니다.
p  
  | Put the template in its own code #[+adjExPath('app.component.html')]
p
  | 파일은 다음과 같습니다:
p
  | file that looks like this:
+makeExample('attribute-directives/ts/src/app/app.component.1.html',null,'src/app/app.component.html')(format=".")
:marked
  이제 이 템플릿을 `AppComponent`에서 참조하세요:

  Now reference this template in the `AppComponent`:
+makeExample('attribute-directives/ts/src/app/app.component.ts',null,'src/app/app.component.ts')
:marked
  다음으로 `import` 문을 추가하여 `Highlight` 지시자를 임포트하고
  그 클래스를 `declarations` NgModule 메타데이터에 추가하세요.
  이런 식으로 Angular는 템플릿에서 `myHighlight` 지시자를 인식합니다.

  Next, add an `import` statement to fetch the `Highlight` directive and
  add that class to the `declarations` NgModule metadata. This way Angular
  recognizes the directive when it encounters `myHighlight` in the template.
+makeExample('attribute-directives/ts/src/app/app.module.ts',null,'src/app/app.module.ts')
:marked
  이제 애플리케이션이 실행될 때 `myHighlight` 지시자는 단락 텍스트를 강조 표시합니다.

  Now when the app runs, the `myHighlight` directive highlights the paragraph text.

figure.image-display
  img(src="/resources/images/devguide/attribute-directives/first-highlight.png" alt="First Highlight")
.l-sub-section
  :marked
    ### 여러분의 지시자가 동작하지 않나요?
    ### Your directive isn't working?

    지시자를 `@NgModule`의 `declarations` 속성에 추가하는 것을 잊지 않았습니까? 잊기 쉽습니다!
    브라우저 도구에서 콘솔을 열고 다음과 같은 오류를 찾으세요:

    Did you remember to add the directive to the `declarations` attribute of `@NgModule`? It is easy to forget!
    Open the console in the browser tools and look for an error like this:
  code-example(format="nocode").
    EXCEPTION: Template parse errors:
      Can't bind to 'myHighlight' since it isn't a known property of 'p'.

  :marked
    Angular가 *어떤 것에* 바인딩 하려고 한다는 것을 발견했지만
    모듈의 `declarations` 배열에서 이 지시자를 찾을 수 없다는 것입니다.
    `declarations`배열에서 `HighlightDirective`를 지정하면, 
    Angular는 이 모듈에서 선언된 컴포넌트에 지시자를 적용 할 수 있다는 것을 알게 됩니다.

    Angular detects that you're trying to bind to *something* but it can't find this directive
    in the module's `declarations` array. 
    After specifying `HighlightDirective` in the `declarations` array, 
    Angular knows it can apply the directive to components declared in this module.

:marked
  요약하자면, Angular는 `<p>` 엘리먼트에서 `myHighlight` 속성을 발견합니다.
  그러면 `HighlightDirective` 클래스 인스턴스를 생성하고
  지시자의 생성자에서 `<p>` 엘리먼트에 대한 참조를 주입하여
  `<p>` 엘리먼트의 배경 스타일을 노랑색으로 칠합니다.  

  To summarize, Angular found the `myHighlight` attribute on the `<p>` element. 
  It created an instance of the `HighlightDirective` class and
  injected a reference to the `<p>` element into the directive's constructor
  which sets the `<p>` element's background style to yellow.

.l-main-section
a#respond-to-user
:marked
  ## 사용자가 시작한 이벤트에 응답
  ## Respond to user-initiated events

  현재, `myHighlight`는 단순히 엘리먼트 색상을 설정합니다.
  지시자는 보다 역동적일 수 있습니다.
  사용자가 엘리먼트 안팎으로 마우스를 움직이면
  강조색을 설정하거나 지워서 반응 할 수 있습니다.

  Currently, `myHighlight` simply sets an element color.
  The directive could be more dynamic.
  It could detect when the user mouses into or out of the element
  and respond by setting or clearing the highlight color.

  임포트한 심볼 목록에 `HostListener`를 추가하면 됩니다.
  곧 필요할 것이므로 `Input` 심볼도 추가하세요.

  Begin by adding `HostListener` to the list of imported symbols;
  add the `Input` symbol as well because you'll need it soon.
+makeExample('attribute-directives/ts/src/app/highlight.directive.ts','imports')(format=".")

:marked
  그런 다음 마우스가 들어가거나 나올 때 응답하는 두 개의 이벤트 핸들러를 추가하세요. 각 이벤트 핸들러는 `HostListener`!{_decorator_ko}로 장식됩니다.

  Then add two eventhandlers that respond when the mouse enters or leaves, each adorned by the `HostListener` !{_decorator}.
+makeExample('attribute-directives/ts/src/app/highlight.directive.2.ts','mouse-methods')(format=".")

:marked
  `@HostListener`!{_decorator_ko}는 속성 지시자를 호스트하는 DOM 엘리먼트인 `<p>`의 이벤트에 가입할 수 있게 합니다.

  The `@HostListener` !{_decorator} lets you subscribe to events of the DOM element that hosts an attribute directive, the `<p>` in this case.

.l-sub-section
  :marked
    물론 표준 JavaScript로 DOM에 접근하여 이벤트 리스너를 수동으로 연결할 수 있습니다.
    _이러한_ 접근 방식에는 적어도 세 가지 문제가 있습니다:

    Of course you could reach into the DOM with standard JavaScript and and attach event listeners manually.
    There are at least three problems with _that_ approach:

    1. 리스너를 올바르게 작성해야 합니다.

    1. You have to write the listeners correctly.

    1. 메모리 누수를 피하기 위해 지시자가 파손되면 코드에서 리스너를 분리해야 합니다.

    1. The code must *detach* the listener when the directive is destroyed to avoid memory leaks.

    1. DOM API와 직접 대화하는 것이 최선의 방법은 아닙니다.

    1. Talking to DOM API directly isn't a best practice.

:marked
  핸들러는 생성자에서 선언하고 초기화하는 `#{_priv}el` DOM 엘리먼트의
  색상을 설정하는 헬퍼 메소드에 위임합니다.

  The handlers delegate to a helper method that sets the color on the DOM element, `#{_priv}el`,
  which you declare and initialize in the constructor.

+makeExample('attribute-directives/ts/src/app/highlight.directive.2.ts','ctor')(format=".")
:marked
  다음은 업데이트 된 지시자입니다:

  Here's the updated directive in full:
+makeExample('src/app/highlight.directive.2.ts')
:marked
  앱을 실행하고 마우스가 `p`를 가리키면 
  배경색이 나타나고 밖으로 움직이면 사라지는지 확인하세요.

  Run the app and confirm that the background color appears when the mouse hovers over the `p` and
  disappears as it moves out.
figure.image-display
  img(src="/resources/images/devguide/attribute-directives/highlight-directive-anim.gif" alt="Second Highlight")
.l-main-section
a#bindings
:marked
  ## _@Input_ 데이터 바인딩을 사용하여 지시자에 값을 전달
  ## Pass values into the directive with an _@Input_ data binding

  현재 하이라이트 색상은 지시자 안에 하드 코딩되어 있습니다. 이건 융통성이 없습니다.
  지시자의 사용자가 바인딩을 사용하여 템플릿의 색상을 설정하게 하세요.

  Currently the highlight color is hard-coded _within_ the directive. That's inflexible.
  Let the user of the directive set the color in the template with a binding.

  다음과 같이 지시자 클래스에 `highlightColor` 속성을 추가합니다:

  Start by adding a `highlightColor` property to the directive class like this:
+makeExample('attribute-directives/ts/src/app/highlight.directive.2.ts','color', 'src/app/highlight.directive.ts')

a#input
:marked
  ### _@Input_ 속성에 바인딩
  ### Binding to an _@Input_ property

  `@Input`!{_decorator_ko}를 주목하세요. 지시자의 `highlightColor` 프로퍼티를 바인딩에 사용할 수 있도록 메타데이터를 클래스에 추가합니다.
  
  Notice the `@Input` !{_decorator}. It adds metadata to the class that makes the directive's `highlightColor` property available for binding.
  
  데이터가 바인딩 표현식에서 지시자 _방향으로_ 흐르기 때문에 *input* 프로퍼티라고 합니다.
  input 메타데이터가 없으면 Angular는 바인딩을 거부합니다. [아래](#why-input "왜 @Input을 추가할까?")를 참조하세요.

  It's called an *input* property because data flows from the binding expression _into_ the directive. 
  Without that input metadata, Angular rejects the binding; see [below](#why-input "Why add @Input?") for more about that.

  `AppComponent` 템플릿에 다음 지시자 바인딩 변형을 추가하고 시도해 보세요:

  Try it by adding the following directive binding variations to the `AppComponent` template:
+makeExample('attribute-directives/ts/src/app/app.component.1.html','color-1', 'src/app/app.component.html')(format='.')

:marked
  `AppComponent`에 `color` 프로퍼티를 추가하세요.

  Add a `color` property to the `AppComponent`.
+makeExample('attribute-directives/ts/src/app/app.component.1.ts','class', 'src/app/app.component.ts (class)')(format='.')
:marked
  프로퍼티 바인딩을 사용해 강조 색상을 제어하세요.

  Let it control the highlight color with a property binding.
+makeExample('attribute-directives/ts/src/app/app.component.1.html','color-2', 'src/app/app.component.html')

:marked
  이렇게도 괜찮지만, 다음과 같이 지시자를 적용함과 동시에 _같은 속성_에서 색상을 설정하면 좋을 것입니다.

  That's good, but it would be nice to _simultaneously_ apply the directive and set the color _in the same attribute_ like this.
+makeExample('attribute-directives/ts/src/app/app.component.html','color')

:marked
  `[myHighlight]` 속성 바인딩은 highlight 지시자를 `<p>` 엘리먼트에 적용하고
  지시자의 highlight 색상을 프로퍼티 바인딩으로 설정합니다.
  지시자의 속성 선택자(`[myHighlight]`)를 사용하여 두 작업을 모두 수행하고 있습니다.
  이것은 선명하고 간결한 구문입니다.

  The `[myHighlight]` attribute binding both applies the highlighting directive to the `<p>` element 
  and sets the directive's highlight color with a property binding.
  You're re-using the directive's attribute selector (`[myHighlight]`) to do both jobs.
  That's a crisp, compact syntax.

  지시자의 `highlightColor` 프로퍼티의 이름을 `myHighlight`로 변경해야 하므로 색상 프로퍼티 바인딩의 이름입니다.

  You'll have to rename the directive's `highlightColor` property to `myHighlight` because that's now the color property binding name.
+makeExample('attribute-directives/ts/src/app/highlight.directive.2.ts','color-2', 'src/app/highlight.directive.ts (renamed to match directive selector)')
:marked
  이렇게 하는 것에는 불만스러운 점이 있습니다. `myHighlight`라는 단어는 끔찍한 프로퍼티 이름이고 프로퍼티의 의도를 전달하지 않습니다.

  This is disagreeable. The word, `myHighlight`, is a terrible property name and it doesn't convey the property's intent.

a#input-alias
:marked
  ### _@Input_ 별칭에 바인딩
  ### Bind to an _@Input_ alias

  다행스럽게도 원하는대로 지시자 프로퍼티의 이름을 정할 수 있고 _그리고_ 바인딩 목적으로 **_별칭을 부여_**할 수 있습니다.
  
  Fortunately you can name the directive property whatever you want _and_ **_alias it_** for binding purposes.
  
  원래 프로퍼티 이름을 복원하고 `@Input`에 대한 인수에서 별명으로 선택자를 지정하세요.

  Restore the original property name and specify the selector as the alias in the argument to `@Input`. 

+makeExcerpt('src/app/highlight.directive.ts', 'color', 'src/app/highlight.directive.ts (color property with alias')
:marked
  지시자 _안에서_ 프로퍼티는 `highlightColor`로 알려져 있습니다.
  지시자 _밖에서_ 바인딩을 하는 어떤 곳이든 그것은 `myHighlight`로 알려져 있습니다.

  _Inside_ the directive the property is known as `highlightColor`.
  _Outside_ the directive, where you bind to it, it's known as `myHighlight`.

  원하는 프로퍼티 이름과 원하는 바인딩 구문을 사용하여 두 세계의 장점을 최대한 활용할 수 있습니다.

  You get the best of both worlds: the property name you want and the binding syntax you want:
+makeExample('attribute-directives/ts/src/app/app.component.html','color')

:marked
  이제 `highlightColor`에 바인딩하고 있으므로, 이것을 사용하기 위해 `onMouseEnter()` 메소드를 수정하세요.
  `highlightColor`에 바인딩하지 않은 경우, 기본값 "red"로 highlight 합니다.

  Now that you're binding to `highlightColor`, modify the `onMouseEnter()` method to use it. 
  If someone neglects to bind to `highlightColor`, highlight in "red" by default.

+makeExample('attribute-directives/ts/src/app/highlight.directive.3.ts', 'mouse-enter', 'src/app/highlight.directive.ts (mouse enter)')(format='.')
:marked
  다음은 지시자 클래스의 최종 버전입니다.

  Here's the latest version of the directive class.
+makeExcerpt('src/app/highlight.directive.3.ts')

:marked
  ## 테스트 지원도구 작성
  ## Write a harness to try it
:marked
  이 지침이 실제로 어떻게 작동하는지 상상하기 어려울 수 있습니다.
  이 섹션에서는 `AppComponent`를 지원도구로 전환하여
  라디오 버튼으로 강조 색상을 선택하고 색상 선택을 지시자에 바인딩 하겠습니다.
  
  It may be difficult to imagine how this directive actually works.
  In this section, you'll turn `AppComponent` into a harness that
  lets you pick the highlight color with a radio button and bind your color choice to the directive.
  
  다음과 같이 `app.component.html`을 업데이트하세요:

  Update `app.component.html` as follows:

+makeExcerpt('attribute-directives/ts/src/app/app.component.html', 'v2', '')

:marked
  `AppComponent.color`를 수정하여 초기 값이 없도록 하세요.

  Revise the `AppComponent.color` so that it has no initial value.
+makeExcerpt('attribute-directives/ts/src/app/app.component.ts', 'class', '')

:marked
  사용 중인 지원도구 및 지시자는 다음과 같습니다.

  Here is the harness and directive in action.
figure.image-display
  img(src="/resources/images/devguide/attribute-directives/highlight-directive-v2-anim.gif" alt="Highlight v.2")

.l-main-section
a#second-property
:marked
  ## 두 번째 프로퍼티에 바인딩
  ## Bind to a second property
  이 highlight 지시자는 사용자가 정의 할 수 있는 한가지 속성이 있습니다. 실제 앱에서는 더 많이 필요할 수 있습니다.

  This highlight directive has a single customizable property. In a real app, it may need more.

  현재 기본 색상 &mdash; 사용자가 강조 색상을 선택할 때까지 적용되는 색상 &mdash;은 "빨간색"으로 하드코딩 되어 있습니다.
  템플릿 개발자가 기본 색상을 설정하게 하세요.

  At the moment, the default color &mdash; the color that prevails until the user picks a highlight color &mdash; 
  is hard-coded as "red". Let the template developer set the default color.

  `defaultColor`라 불리는 `HighlightDirective` 두번째 **input** 속성을 추가하세요:

  Add a second **input** property to `HighlightDirective` called `defaultColor`:
+makeExcerpt('attribute-directives/ts/src/app/highlight.directive.ts', 'defaultColor','src/app/highlight.directive.ts (defaultColor)')
:marked
  지시자의 `onMouseEnter`를 수정하여 `highlightColor`로 먼저 강조 표시 한 다음
  `defaultColor`로 강조 표시하고 두 속성이 모두 정의되지 않은 경우 "red"로 되돌아갑니다.

  Revise the directive's `onMouseEnter` so that it first tries to highlight with the `highlightColor`,
  then with the `defaultColor`, and falls back to "red" if both properties are undefined.
+makeExample('attribute-directives/ts/src/app/highlight.directive.ts', 'mouse-enter')(format=".")
:marked
  이미 `myHighlight` 속성 이름에 바인딩 한 상태에서 두 번째 속성을 어떻게 바인딩할까요?

  How do you bind to a second property when you're already binding to the `myHighlight` attribute name?

  컴포넌트와 마찬가지로 템플릿에서 문자열을 묶어 필요한 만큼 많은 지시자 속성 바인딩을 추가 할 수 있습니다.
  개발자는 `AppComponent.color`에 바인딩하고 기본 색상으로 `violet`으로 
  대비하기 위해 다음 템플릿 HTML을 작성할 수 있어야 합니다.

  As with components, you can add as many directive property bindings as you need by stringing them along in the template.
  The developer should be able to write the following template HTML to both bind to the `AppComponent.color` 
  and fall back to "violet" as the default color.
+makeExample('attribute-directives/ts/src/app/app.component.html', 'defaultColor')(format=".")
:marked
  Angular는 `defaultColor` 바인딩이 `HighlightDirective`에 속한다는 것을 알고 있습니다.
  왜냐하면 `@Input`!{_decorator_ko}를 사용하여 _public_으로 만들었기 때문입니다.

  Angular knows that the `defaultColor` binding belongs to the `HighlightDirective` 
  because you made it _public_ with the `@Input` !{_decorator}.

  코딩을 마쳤을 때 지원도구가 작동하는 방법은 다음과 같습니다.

  Here's how the harness should work when you're done coding.
figure.image-display
  img(src="/resources/images/devguide/attribute-directives/highlight-directive-final-anim.gif" alt="Final Highlight")

.l-main-section
:marked
  ## 요약
  ## Summary
  이 페이지에서는 다음을 수행하는 방법에 대해 설명했습니다:

  This page covered how to:

  - [**속성 지시자**를 작성](#write-directive)하여 엘리먼트의 동작을 수정.

  - [Build an **attribute directive**](#write-directive) that modifies the behavior of an element.

  - 템플릿의 엘리먼트에 [지시자를 적용](#apply-directive).

  - [Apply the directive](#apply-directive) to an element in a template.

  - 지시자의 동작을 변경하는 [**events**에 응답](#respond-to-user).

  - [Respond to **events**](#respond-to-user) that change the directive's behavior.

  - [지시자에 값을 **바인딩**](#bindings).

  - [**Bind** values to the directive](#bindings).

  최종 소스 코드는 다음과 같습니다:

  The final source code follows:

+makeTabs(
  `attribute-directives/ts/src/app/app.component.ts,
   attribute-directives/ts/src/app/app.component.html,
   attribute-directives/ts/src/app/highlight.directive.ts,
   attribute-directives/ts/src/app/app.module.ts,
   attribute-directives/ts/src/main.ts,
   attribute-directives/ts/src/index.html
  `,
  '',
  `app/app.component.ts,
   app/app.component.html,
   app/highlight.directive.ts,
   app/app.module.ts,
   main.ts,
   index.html
  `)

:marked
  또한 <live-example title="속성 지시자 예제"></live-example>에서 시험하고 다운로드 할 수 있습니다.

  You can also experience and download the <live-example title="Attribute Directive example"></live-example>.

a#why-input
.l-main-section
:marked
  ### 부록: _@Input_을 왜 추가해야 할까요?
  ### Appendix: Why add _@Input_?

  이 데모에서 `hightlightColor` 프로퍼티는 `HighlightDirective`의 ***input*** 프로퍼티입니다.
  다음은 별칭 없이 적용한 것입니다:

  In this demo, the `hightlightColor` property is an ***input*** property of
  the `HighlightDirective`. You've seen it applied without an alias:
+makeExample('attribute-directives/ts/src/app/highlight.directive.2.ts','color')
:marked
  다음은 별칭을 적용한 것입니다:

  You've seen it with an alias:
+makeExample('attribute-directives/ts/src/app/highlight.directive.ts','color')

:marked
  어느 쪽이든, `@Input` !{_decorator_ko}는 Angular에게 이 프로퍼티가
  _public_이며 상위 컴포넌트에 바인딩하여 사용할 수 있다는 것을 알려줍니다.
  `@Input`이 없으면 Angular는 속성 바인딩을 거부합니다.

  Either way, the `@Input` !{_decorator} tells Angular that this property is 
  _public_ and available for binding by a parent component.
  Without  `@Input`, Angular refuses to bind to the property.

  전에는 템플릿 HTML을 컴포넌트 속성에 바인딩 하고 `@Input`을 사용하지 않았습니다.
  뭐가 다를까요?

  You've bound template HTML to component properties before and never used `@Input`. 
  What's different?

  그 차이는 신뢰의 문제입니다.
  Angular는 컴포넌트의 템플릿을 해당 컴포넌트의 _소유물_로 처리합니다.
  컴포넌트와 해당 템플릿은 암시적으로 서로를 신뢰합니다.
  그러므로 컴포넌트의 템플릿은 `@Input` !{_decorator_ko}의 유무에 관계없이 해당 컴포넌트의 속성에 바인딩 될 수 있습니다.

  The difference is a matter of trust.
  Angular treats a component's template as _belonging_ to the component.
  The component and its template trust each other implicitly.
  Therefore, the component's own template may bind to _any_ property of that component,
  with or without the `@Input` !{_decorator}.

  그러나 컴포넌트 또는 지시자는 _다른_ 컴포넌트 및 지시자을 맹목적으로 신뢰하면 안됩니다.
  컴포넌트 또는 지시자의 속성은 기본적으로 바인딩에서 숨겨집니다.
  그것들은 Angular 바인딩 관점에서 _private_ 입니다.
  `@Input` !{_decorator_ko}로 장식 되면, 속성은 Angular 바인딩 관점에서 _public_이 됩니다.
  그래야만 다른 컴포넌트나 지시자에 바인딩 할 수 있습니다.
  
  But a component or directive shouldn't blindly trust _other_ components and directives.
  The properties of a component or directive are hidden from binding by default.
  They are _private_ from an Angular binding perspective.
  When adorned with the `@Input` !{_decorator}, the property becomes _public_ from an Angular binding perspective. 
  Only then can it be bound by some other component or directive.
  
  바인딩에서 속성 이름의 위치에 의해 `@Input`이 필요한지 알 수 있습니다.

  You can tell if `@Input` is needed by the position of the property name in a binding.

  * 템플릿 표현식에서 등호(=)의 ***오른쪽***에 나타나면 템플릿의 컴포넌트에 속하며 `@Input` !{_decorator_ko}는 필요 없습니다.

  * When it appears in the template expression to the ***right*** of the equals (=),
  it belongs to the template's component and does not require the `@Input` !{_decorator}.

  * 등호(=)의 **왼쪽**에 **대괄호** ([ ])로 표시되면 이 속성은 일부 _다른_ 컴포넌트 또는 지시자에 속합니다. 그 속성은 `@Input` !{_decorator_ko}로 장식되어야 합니다.

  * When it appears in **square brackets** ([ ]) to the **left** of the equals (=),
  the property belongs to some _other_ component or directive;
  that property must be adorned with the `@Input` !{_decorator}.

  이제 그 논리를 다음 예제에 적용해보겠습니다:

  Now apply that reasoning to the following example:
+makeExample('attribute-directives/ts/src/app/app.component.html','color')(format=".")
:marked
  * 오른쪽 표현식의 `color` 프로퍼티는 템플릿의 컴포넌트에 속합니다.
  템플릿과 해당 컴포넌트는 서로를 신뢰합니다.
  `color` 프로퍼티는 `@Input` !{_decorator_ko}를 필요로 하지 않습니다.

  * The `color` property in the expression on the right belongs to the template's component. 
  The template and its component trust each other.
  The `color` property doesn't require the `@Input` !{_decorator}.

  * 왼쪽의 `myHighlight` 프로퍼티는 템플릿 컴포넌트의 프로퍼티가 아닌 `MyHighlightDirective`의
  _별칭_ 프로퍼티를 참조합니다. 신뢰의 문제가 있습니다.
  따라서, 지시자 프로퍼티는 `@Input` !{_decorator_ko}를 가져야 합니다.

  * The `myHighlight` property on the left refers to an _aliased_ property of the `MyHighlightDirective`,
  not a property of the template's component. There are trust issues.
  Therefore, the directive property must carry the `@Input` !{_decorator}.
